//
// Generated by JTB 1.3.3
//

package lang.minijava.syntaxtree;

/**
 * Grammar production:
 * f0 -> "public"
 * f1 -> Type()
 * f2 -> Identifier()
 * f3 -> "("
 * f4 -> ( FormalParameterList() )?
 * f5 -> ")"
 * f6 -> "{"
 * f7 -> ( Comment() )*
 * f8 -> ( VarDeclarationUnordered() )*
 * f9 -> ( Statement() )*
 * f10 -> "return"
 * f11 -> Expression()
 * f12 -> ";"
 * f13 -> "}"
 */
import java.util.*;
import lang.syntaxtree.*;
public class MethodDeclarationUnordered implements Node {
   private Node parent;
   public NodeToken f0;
   public Type f1;
   public Identifier f2;
   public NodeToken f3;
   public NodeOptional f4;
   public NodeToken f5;
   public NodeToken f6;
   public NodeListOptional f7;
   public NodeListOptional f8;
   public NodeListOptional f9;
   public NodeToken f10;
   public Expression f11;
   public NodeToken f12;
   public NodeToken f13;
   private ArrayList<Node> subNodes = new ArrayList<Node>();

   public MethodDeclarationUnordered(NodeToken n0, Type n1, Identifier n2, NodeToken n3, NodeOptional n4, NodeToken n5, NodeToken n6, NodeListOptional n7, NodeListOptional n8, NodeListOptional n9, NodeToken n10, Expression n11, NodeToken n12, NodeToken n13) {
      f0 = n0;
      if ( f0 != null ) f0.setParent(this);
      f1 = n1;
      if ( f1 != null ) f1.setParent(this);
      f2 = n2;
      if ( f2 != null ) f2.setParent(this);
      f3 = n3;
      if ( f3 != null ) f3.setParent(this);
      f4 = n4;
      if ( f4 != null ) f4.setParent(this);
      f5 = n5;
      if ( f5 != null ) f5.setParent(this);
      f6 = n6;
      if ( f6 != null ) f6.setParent(this);
      f7 = n7;
      if ( f7 != null ) f7.setParent(this);
      f8 = n8;
      if ( f8 != null ) f8.setParent(this);
      f9 = n9;
      if ( f9 != null ) f9.setParent(this);
      f10 = n10;
      if ( f10 != null ) f10.setParent(this);
      f11 = n11;
      if ( f11 != null ) f11.setParent(this);
      f12 = n12;
      if ( f12 != null ) f12.setParent(this);
      f13 = n13;
      if ( f13 != null ) f13.setParent(this);

      buildSubNodesList();
   }

   public MethodDeclarationUnordered(Type n0, Identifier n1, NodeOptional n2, NodeListOptional n3, NodeListOptional n4, NodeListOptional n5, Expression n6) {
      f0 = new NodeToken("public");
      if ( f0 != null ) f0.setParent(this);
      f1 = n0;
      if ( f1 != null ) f1.setParent(this);
      f2 = n1;
      if ( f2 != null ) f2.setParent(this);
      f3 = new NodeToken("(");
      if ( f3 != null ) f3.setParent(this);
      f4 = n2;
      if ( f4 != null ) f4.setParent(this);
      f5 = new NodeToken(")");
      if ( f5 != null ) f5.setParent(this);
      f6 = new NodeToken("{");
      if ( f6 != null ) f6.setParent(this);
      f7 = n3;
      if ( f7 != null ) f7.setParent(this);
      f8 = n4;
      if ( f8 != null ) f8.setParent(this);
      f9 = n5;
      if ( f9 != null ) f9.setParent(this);
      f10 = new NodeToken("return");
      if ( f10 != null ) f10.setParent(this);
      f11 = n6;
      if ( f11 != null ) f11.setParent(this);
      f12 = new NodeToken(";");
      if ( f12 != null ) f12.setParent(this);
      f13 = new NodeToken("}");
      if ( f13 != null ) f13.setParent(this);

      buildSubNodesList();
   }
   private void buildSubNodesList() {
      subNodes.add(f0);
      subNodes.add(f1);
      subNodes.add(f2);
      subNodes.add(f3);
      subNodes.add(f4);
      subNodes.add(f5);
      subNodes.add(f6);
      subNodes.add(f7);
      subNodes.add(f8);
      subNodes.add(f9);
      subNodes.add(f10);
      subNodes.add(f11);
      subNodes.add(f12);
      subNodes.add(f13);
   }


   public void accept(lang.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(lang.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(lang.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(lang.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }

   public void accept(lang.visitor.ListVisitor v) {
      v.visit(this);
   }
   public <R,A> R accept(lang.visitor.GJListVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(lang.visitor.GJNoArguListVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(lang.visitor.GJVoidListVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
   public void setSubNodes(ArrayList<Node> n) { subNodes = n; }
   public ArrayList<Node> getSubNodes() { return subNodes; }
}

