/* Generated By:JavaCC: Do not edit this line. PythonParser.java */
package lang.python;

import lang.python.syntaxtree.*;
import lang.syntaxtree.*;
import java.util.Vector;


public class PythonParser implements PythonParserConstants {

  final public file_input file_input() throws ParseException {
   stmt_list n0;
   NodeToken n1;
   Token n2;
    n0 = stmt_list();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new file_input(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public stmt_list stmt_list() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   stmt n2;
   stmt_list n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   stmt_list n7;
   end_stmt_list n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case IF:
    case WHILE:
    case FOR:
    case TRY:
    case DEF:
    case CLASS:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case IMPORT:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
        n1 = new NodeSequence(2);
      n2 = stmt();
        n1.addNode(n2);
      n3 = stmt_list();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case NEWLINE:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(NEWLINE);
                     n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = stmt_list();
        n4.addNode(n7);
        n0 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[0] = jj_gen;
      n8 = end_stmt_list();
        n0 = new NodeChoice(n8, 2);
    }
     {if (true) return new stmt_list(n0);}
    throw new Error("Missing return statement in function");
  }

  final public end_stmt_list end_stmt_list() throws ParseException {
     {if (true) return new end_stmt_list();}
    throw new Error("Missing return statement in function");
  }

  final public funcdef funcdef() throws ParseException {
   NodeToken n0;
   Token n1;
   AnyName n2;
   parameters n3;
   NodeToken n4;
   Token n5;
   suite n6;
    n1 = jj_consume_token(DEF);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AnyName();
    n3 = parameters();
    n5 = jj_consume_token(COLON);
                n4 = JTBToolkit.makeNodeToken(n5);
    n6 = suite();
     {if (true) return new funcdef(n0,n2,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public parameters parameters() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   varargslist n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LPAREN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MULTIPLY:
    case POWER:
    case AS:
    case NAME:
      n3 = varargslist();
        n2.addNode(n3);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RPAREN);
                 n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new parameters(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public varargslist varargslist() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   defaultarg n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   defaultarg n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   ExtraArgList n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ExtraKeywordList n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   NodeSequence n22;
   ExtraArgList n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   ExtraKeywordList n28;
   ExtraKeywordList n29;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case AS:
    case NAME:
        n1 = new NodeSequence(5);
      n2 = defaultarg();
        n1.addNode(n2);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(COMMA);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n7 = defaultarg();
           n4.addNode(n7);
           n3.addNode(n4);
      }
        n3.nodes.trimToSize();
        n1.addNode(n3);
      if (jj_2_2(3)) {
           n9 = new NodeSequence(2);
        n11 = jj_consume_token(COMMA);
                       n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
        n12 = ExtraArgList();
           n9.addNode(n12);
           n8.addNode(n9);
      } else {
        ;
      }
        n1.addNode(n8);
      if (jj_2_3(2)) {
           n14 = new NodeSequence(2);
        n16 = jj_consume_token(COMMA);
                       n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        n17 = ExtraKeywordList();
           n14.addNode(n17);
           n13.addNode(n14);
      } else {
        ;
      }
        n1.addNode(n13);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n20 = jj_consume_token(COMMA);
                       n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
        n1.addNode(n18);
        n0 = new NodeChoice(n1, 0);
      break;
    case MULTIPLY:
    case POWER:
      if (jj_2_4(2)) {
              n22 = new NodeSequence(3);
        n23 = ExtraArgList();
              n22.addNode(n23);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
                 n25 = new NodeSequence(2);
          n27 = jj_consume_token(COMMA);
                             n26 = JTBToolkit.makeNodeToken(n27);
                 n25.addNode(n26);
          n28 = ExtraKeywordList();
                 n25.addNode(n28);
                 n24.addNode(n25);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
              n22.addNode(n24);
              n21 = new NodeChoice(n22, 0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case POWER:
          n29 = ExtraKeywordList();
              n21 = new NodeChoice(n29, 1);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n0 = new NodeChoice(n21, 1);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new varargslist(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtraArgList ExtraArgList() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
    n1 = jj_consume_token(MULTIPLY);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
     {if (true) return new ExtraArgList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExtraKeywordList ExtraKeywordList() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Name n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
      n2 = jj_consume_token(POWER);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MULTIPLY:
           n3 = new NodeSequence(2);
      n5 = jj_consume_token(MULTIPLY);
                         n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      n7 = jj_consume_token(MULTIPLY);
                         n6 = JTBToolkit.makeNodeToken(n7);
           n3.addNode(n6);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n8 = Name();
     {if (true) return new ExtraKeywordList(n0,n8);}
    throw new Error("Missing return statement in function");
  }

  final public defaultarg defaultarg() throws ParseException {
   fpdef n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   test n5;
    n0 = fpdef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(EQUAL);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = test();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
     {if (true) return new defaultarg(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public fpdef fpdef() throws ParseException {
   NodeChoice n0;
   Name n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   fplist n5;
   NodeToken n6;
   Token n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case NAME:
      n1 = Name();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(LPAREN);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = fplist();
        n2.addNode(n5);
      n7 = jj_consume_token(RPAREN);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new fpdef(n0);}
    throw new Error("Missing return statement in function");
  }

  final public fplist fplist() throws ParseException {
   fpdef n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   fpdef n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
    n0 = fpdef();
    label_2:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_2;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = fpdef();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n8 = jj_consume_token(COMMA);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     {if (true) return new fplist(n0,n1,n6);}
    throw new Error("Missing return statement in function");
  }

  final public stmt stmt() throws ParseException {
   NodeChoice n0;
   simple_stmt n1;
   compound_stmt n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case IMPORT:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n1 = simple_stmt();
        n0 = new NodeChoice(n1, 0);
      break;
    case IF:
    case WHILE:
    case FOR:
    case TRY:
    case DEF:
    case CLASS:
      n2 = compound_stmt();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public simple_stmt simple_stmt() throws ParseException {
   small_stmt n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   small_stmt n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    n0 = small_stmt();
    label_3:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SEMICOLON);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = small_stmt();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n8 = jj_consume_token(SEMICOLON);
                       n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    n10 = jj_consume_token(NEWLINE);
                   n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new simple_stmt(n0,n1,n6,n9);}
    throw new Error("Missing return statement in function");
  }

  final public small_stmt small_stmt() throws ParseException {
   NodeChoice n0;
   expr_stmt n1;
   print_stmt n2;
   del_stmt n3;
   pass_stmt n4;
   flow_stmt n5;
   import_stmt n6;
   global_stmt n7;
   exec_stmt n8;
   assert_stmt n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n1 = expr_stmt();
        n0 = new NodeChoice(n1, 0);
      break;
    case PRINT:
      n2 = print_stmt();
        n0 = new NodeChoice(n2, 1);
      break;
    case DEL:
      n3 = del_stmt();
        n0 = new NodeChoice(n3, 2);
      break;
    case PASS:
      n4 = pass_stmt();
        n0 = new NodeChoice(n4, 3);
      break;
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case RAISE:
      n5 = flow_stmt();
        n0 = new NodeChoice(n5, 4);
      break;
    case IMPORT:
    case FROM:
      n6 = import_stmt();
        n0 = new NodeChoice(n6, 5);
      break;
    case GLOBAL:
      n7 = global_stmt();
        n0 = new NodeChoice(n7, 6);
      break;
    case EXEC:
      n8 = exec_stmt();
        n0 = new NodeChoice(n8, 7);
      break;
    case ASSERT:
      n9 = assert_stmt();
        n0 = new NodeChoice(n9, 8);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new small_stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public expr_stmt expr_stmt() throws ParseException {
   SmartTestList n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SmartTestList n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SmartTestList n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   SmartTestList n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SmartTestList n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   SmartTestList n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   SmartTestList n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   SmartTestList n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   SmartTestList n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   SmartTestList n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   SmartTestList n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   SmartTestList n45;
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   SmartTestList n49;
   NodeListOptional n50 = new NodeListOptional();
   NodeSequence n51;
   NodeToken n52;
   Token n53;
   SmartTestList n54;
    n0 = SmartTestList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSEQ:
           n2 = new NodeSequence(2);
      n4 = jj_consume_token(PLUSEQ);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
      n5 = SmartTestList();
           n2.addNode(n5);
           n1 = new NodeChoice(n2, 0);
      break;
    case MINUSEQ:
           n6 = new NodeSequence(2);
      n8 = jj_consume_token(MINUSEQ);
                        n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
      n9 = SmartTestList();
           n6.addNode(n9);
           n1 = new NodeChoice(n6, 1);
      break;
    case MULTIPLYEQ:
           n10 = new NodeSequence(2);
      n12 = jj_consume_token(MULTIPLYEQ);
                            n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
      n13 = SmartTestList();
           n10.addNode(n13);
           n1 = new NodeChoice(n10, 2);
      break;
    case DIVIDEEQ:
           n14 = new NodeSequence(2);
      n16 = jj_consume_token(DIVIDEEQ);
                          n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
      n17 = SmartTestList();
           n14.addNode(n17);
           n1 = new NodeChoice(n14, 3);
      break;
    case FLOORDIVIDEEQ:
           n18 = new NodeSequence(2);
      n20 = jj_consume_token(FLOORDIVIDEEQ);
                               n19 = JTBToolkit.makeNodeToken(n20);
           n18.addNode(n19);
      n21 = SmartTestList();
           n18.addNode(n21);
           n1 = new NodeChoice(n18, 4);
      break;
    case MODULOEQ:
           n22 = new NodeSequence(2);
      n24 = jj_consume_token(MODULOEQ);
                          n23 = JTBToolkit.makeNodeToken(n24);
           n22.addNode(n23);
      n25 = SmartTestList();
           n22.addNode(n25);
           n1 = new NodeChoice(n22, 5);
      break;
    case ANDEQ:
           n26 = new NodeSequence(2);
      n28 = jj_consume_token(ANDEQ);
                       n27 = JTBToolkit.makeNodeToken(n28);
           n26.addNode(n27);
      n29 = SmartTestList();
           n26.addNode(n29);
           n1 = new NodeChoice(n26, 6);
      break;
    case OREQ:
           n30 = new NodeSequence(2);
      n32 = jj_consume_token(OREQ);
                      n31 = JTBToolkit.makeNodeToken(n32);
           n30.addNode(n31);
      n33 = SmartTestList();
           n30.addNode(n33);
           n1 = new NodeChoice(n30, 7);
      break;
    case XOREQ:
           n34 = new NodeSequence(2);
      n36 = jj_consume_token(XOREQ);
                       n35 = JTBToolkit.makeNodeToken(n36);
           n34.addNode(n35);
      n37 = SmartTestList();
           n34.addNode(n37);
           n1 = new NodeChoice(n34, 8);
      break;
    case LSHIFTEQ:
           n38 = new NodeSequence(2);
      n40 = jj_consume_token(LSHIFTEQ);
                          n39 = JTBToolkit.makeNodeToken(n40);
           n38.addNode(n39);
      n41 = SmartTestList();
           n38.addNode(n41);
           n1 = new NodeChoice(n38, 9);
      break;
    case RSHIFTEQ:
           n42 = new NodeSequence(2);
      n44 = jj_consume_token(RSHIFTEQ);
                          n43 = JTBToolkit.makeNodeToken(n44);
           n42.addNode(n43);
      n45 = SmartTestList();
           n42.addNode(n45);
           n1 = new NodeChoice(n42, 10);
      break;
    case POWEREQ:
           n46 = new NodeSequence(2);
      n48 = jj_consume_token(POWEREQ);
                         n47 = JTBToolkit.makeNodeToken(n48);
           n46.addNode(n47);
      n49 = SmartTestList();
           n46.addNode(n49);
           n1 = new NodeChoice(n46, 11);
      break;
    default:
      jj_la1[14] = jj_gen;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
              n51 = new NodeSequence(2);
        n53 = jj_consume_token(EQUAL);
                          n52 = JTBToolkit.makeNodeToken(n53);
              n51.addNode(n52);
        n54 = SmartTestList();
              n51.addNode(n54);
              n50.addNode(n51);
      }
           n50.nodes.trimToSize();
           n1 = new NodeChoice(n50, 12);
    }
     {if (true) return new expr_stmt(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public print_stmt print_stmt() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   test n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   NodeList n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   test n13;
   NodeOptional n14;
   Comma n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   test n19;
   NodeListOptional n20 = new NodeListOptional();
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   test n24;
   NodeOptional n25 = new NodeOptional();
   Comma n26;
   NodeToken n27;
   Token n28;
    if (jj_2_9(2)) {
        n1 = new NodeSequence(5);
      n3 = jj_consume_token(PRINT);
                   n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(RSHIFT);
                    n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = test();
        n1.addNode(n6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n9 = new NodeList();
           n14 = new NodeOptional();
           n8 = new NodeSequence(2);
        label_5:
        while (true) {
              n10 = new NodeSequence(2);
          n12 = jj_consume_token(COMMA);
                          n11 = JTBToolkit.makeNodeToken(n12);
              n10.addNode(n11);
          n13 = test();
              n10.addNode(n13);
              n9.addNode(n10);
          if (jj_2_7(2)) {
            ;
          } else {
            break label_5;
          }
        }
           n9.nodes.trimToSize();
           n8.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          n15 = Comma();
              n14.addNode(n15);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
           n8.addNode(n14);
           n7.addNode(n8);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_10(2)) {
        n16 = new NodeSequence(5);
      n18 = jj_consume_token(PRINT);
                    n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      n19 = test();
        n16.addNode(n19);
      label_6:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_6;
        }
           n21 = new NodeSequence(2);
        n23 = jj_consume_token(COMMA);
                       n22 = JTBToolkit.makeNodeToken(n23);
           n21.addNode(n22);
        n24 = test();
           n21.addNode(n24);
           n20.addNode(n21);
      }
        n20.nodes.trimToSize();
        n16.addNode(n20);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n26 = Comma();
           n25.addNode(n26);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
        n16.addNode(n25);
        n0 = new NodeChoice(n16, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        n28 = jj_consume_token(PRINT);
                    n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 2);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new print_stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public del_stmt del_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   exprlist n2;
    n1 = jj_consume_token(DEL);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = exprlist();
     {if (true) return new del_stmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public pass_stmt pass_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(PASS);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new pass_stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public flow_stmt flow_stmt() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   return_stmt n5;
   yield_stmt n6;
   raise_stmt n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      n2 = jj_consume_token(BREAK);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CONTINUE:
      n4 = jj_consume_token(CONTINUE);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case RETURN:
      n5 = return_stmt();
        n0 = new NodeChoice(n5, 2);
      break;
    case YIELD:
      n6 = yield_stmt();
        n0 = new NodeChoice(n6, 3);
      break;
    case RAISE:
      n7 = raise_stmt();
        n0 = new NodeChoice(n7, 4);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new flow_stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public return_stmt return_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   SmartTestList n3;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n3 = SmartTestList();
        n2.addNode(n3);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
     {if (true) return new return_stmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public yield_stmt yield_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   SmartTestList n2;
    n1 = jj_consume_token(YIELD);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SmartTestList();
     {if (true) return new yield_stmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public raise_stmt raise_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   test n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   test n9;
   NodeOptional n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   test n14;
    n1 = jj_consume_token(RAISE);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
        n5 = new NodeOptional();
        n3 = new NodeSequence(2);
      n4 = test();
        n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n10 = new NodeOptional();
           n6 = new NodeSequence(3);
        n8 = jj_consume_token(COMMA);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = test();
           n6.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
              n11 = new NodeSequence(2);
          n13 = jj_consume_token(COMMA);
                          n12 = JTBToolkit.makeNodeToken(n13);
              n11.addNode(n12);
          n14 = test();
              n11.addNode(n14);
              n10.addNode(n11);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
           n6.addNode(n10);
           n5.addNode(n6);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
     {if (true) return new raise_stmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public import_stmt import_stmt() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Import n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   ImportFrom n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(IMPORT);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Import();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case FROM:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(FROM);
                  n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = ImportFrom();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new import_stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Import Import() throws ParseException {
   dotted_as_name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   dotted_as_name n5;
    n0 = dotted_as_name();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = dotted_as_name();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Import(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ImportFrom ImportFrom() throws ParseException {
   dotted_name n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   import_as_name n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   import_as_name n12;
    n0 = dotted_name();
    n2 = jj_consume_token(IMPORT);
                 n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      n5 = jj_consume_token(MULTIPLY);
                         n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
      break;
    case OR_BOOL:
    case AND_BOOL:
    case NOT_BOOL:
    case IS:
    case IN:
    case LAMBDA:
    case IF:
    case ELSE:
    case ELIF:
    case WHILE:
    case FOR:
    case TRY:
    case EXCEPT:
    case DEF:
    case CLASS:
    case FINALLY:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case IMPORT:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
           n6 = new NodeSequence(2);
      n7 = import_as_name();
           n6.addNode(n7);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_8;
        }
              n9 = new NodeSequence(2);
        n11 = jj_consume_token(COMMA);
                          n10 = JTBToolkit.makeNodeToken(n11);
              n9.addNode(n10);
        n12 = import_as_name();
              n9.addNode(n12);
              n8.addNode(n9);
      }
           n8.nodes.trimToSize();
           n6.addNode(n8);
           n3 = new NodeChoice(n6, 1);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ImportFrom(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public dotted_as_name dotted_as_name() throws ParseException {
   dotted_name n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;
    n0 = dotted_name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(AS);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
     {if (true) return new dotted_as_name(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public dotted_name dotted_name() throws ParseException {
   AnyName n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AnyName n5;
    n0 = AnyName();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(DOT);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AnyName();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new dotted_name(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public import_as_name import_as_name() throws ParseException {
   AnyName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;
    n0 = AnyName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(AS);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
     {if (true) return new import_as_name(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public global_stmt global_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Name n7;
    n1 = jj_consume_token(GLOBAL);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Name();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new global_stmt(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public exec_stmt exec_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   expr n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   test n7;
   NodeOptional n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   test n12;
    n1 = jj_consume_token(EXEC);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
        n8 = new NodeOptional();
        n4 = new NodeSequence(3);
      n6 = jj_consume_token(IN);
                n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = test();
        n4.addNode(n7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n9 = new NodeSequence(2);
        n11 = jj_consume_token(COMMA);
                       n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
        n12 = test();
           n9.addNode(n12);
           n8.addNode(n9);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
        n4.addNode(n8);
        n3.addNode(n4);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
     {if (true) return new exec_stmt(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public assert_stmt assert_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   test n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   test n7;
    n1 = jj_consume_token(ASSERT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = test();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = test();
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
     {if (true) return new assert_stmt(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public compound_stmt compound_stmt() throws ParseException {
   NodeChoice n0;
   if_stmt n1;
   while_stmt n2;
   for_stmt n3;
   try_stmt n4;
   funcdef n5;
   classdef n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      n1 = if_stmt();
        n0 = new NodeChoice(n1, 0);
      break;
    case WHILE:
      n2 = while_stmt();
        n0 = new NodeChoice(n2, 1);
      break;
    case FOR:
      n3 = for_stmt();
        n0 = new NodeChoice(n3, 2);
      break;
    case TRY:
      n4 = try_stmt();
        n0 = new NodeChoice(n4, 3);
      break;
    case DEF:
      n5 = funcdef();
        n0 = new NodeChoice(n5, 4);
      break;
    case CLASS:
      n6 = classdef();
        n0 = new NodeChoice(n6, 5);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new compound_stmt(n0);}
    throw new Error("Missing return statement in function");
  }

  final public if_stmt if_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   test n2;
   NodeToken n3;
   Token n4;
   suite n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   test n10;
   NodeToken n11;
   Token n12;
   suite n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   suite n20;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = test();
    n4 = jj_consume_token(COLON);
                n3 = JTBToolkit.makeNodeToken(n4);
    n5 = suite();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIF:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_11;
      }
        n7 = new NodeSequence(4);
      n9 = jj_consume_token(ELIF);
                  n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = test();
        n7.addNode(n10);
      n12 = jj_consume_token(COLON);
                    n11 = JTBToolkit.makeNodeToken(n12);
        n7.addNode(n11);
      n13 = suite();
        n7.addNode(n13);
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n15 = new NodeSequence(3);
      n17 = jj_consume_token(ELSE);
                   n16 = JTBToolkit.makeNodeToken(n17);
        n15.addNode(n16);
      n19 = jj_consume_token(COLON);
                    n18 = JTBToolkit.makeNodeToken(n19);
        n15.addNode(n18);
      n20 = suite();
        n15.addNode(n20);
        n14.addNode(n15);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
     {if (true) return new if_stmt(n0,n2,n3,n5,n6,n14);}
    throw new Error("Missing return statement in function");
  }

  final public while_stmt while_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   test n2;
   NodeToken n3;
   Token n4;
   suite n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   suite n12;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = test();
    n4 = jj_consume_token(COLON);
                n3 = JTBToolkit.makeNodeToken(n4);
    n5 = suite();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n7 = new NodeSequence(3);
      n9 = jj_consume_token(ELSE);
                  n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(COLON);
                    n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
      n12 = suite();
        n7.addNode(n12);
        n6.addNode(n7);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
     {if (true) return new while_stmt(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public for_stmt for_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   exprlist n2;
   NodeToken n3;
   Token n4;
   SmartTestList n5;
   NodeToken n6;
   Token n7;
   suite n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   suite n15;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = exprlist();
    n4 = jj_consume_token(IN);
             n3 = JTBToolkit.makeNodeToken(n4);
    n5 = SmartTestList();
    n7 = jj_consume_token(COLON);
                n6 = JTBToolkit.makeNodeToken(n7);
    n8 = suite();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n10 = new NodeSequence(3);
      n12 = jj_consume_token(ELSE);
                   n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      n14 = jj_consume_token(COLON);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n10.addNode(n13);
      n15 = suite();
        n10.addNode(n15);
        n9.addNode(n10);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
     {if (true) return new for_stmt(n0,n2,n3,n5,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  final public try_stmt try_stmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   suite n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeList n7 = new NodeList();
   except_clause n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   suite n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   suite n21;
    n1 = jj_consume_token(TRY);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = suite();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCEPT:
           n6 = new NodeSequence(2);
      label_12:
      while (true) {
        n8 = except_clause();
              n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPT:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_12;
        }
      }
           n7.nodes.trimToSize();
           n6.addNode(n7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
              n10 = new NodeSequence(3);
        n12 = jj_consume_token(ELSE);
                         n11 = JTBToolkit.makeNodeToken(n12);
              n10.addNode(n11);
        n14 = jj_consume_token(COLON);
                          n13 = JTBToolkit.makeNodeToken(n14);
              n10.addNode(n13);
        n15 = suite();
              n10.addNode(n15);
              n9.addNode(n10);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
           n6.addNode(n9);
           n5 = new NodeChoice(n6, 0);
      break;
    case FINALLY:
           n16 = new NodeSequence(3);
      n18 = jj_consume_token(FINALLY);
                         n17 = JTBToolkit.makeNodeToken(n18);
           n16.addNode(n17);
      n20 = jj_consume_token(COLON);
                       n19 = JTBToolkit.makeNodeToken(n20);
           n16.addNode(n19);
      n21 = suite();
           n16.addNode(n21);
           n5 = new NodeChoice(n16, 1);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new try_stmt(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public except_clause except_clause() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   test n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   test n9;
   NodeToken n10;
   Token n11;
   suite n12;
    n1 = jj_consume_token(EXCEPT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
        n5 = new NodeOptional();
        n3 = new NodeSequence(2);
      n4 = test();
        n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = test();
           n6.addNode(n9);
           n5.addNode(n6);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    n11 = jj_consume_token(COLON);
                 n10 = JTBToolkit.makeNodeToken(n11);
    n12 = suite();
     {if (true) return new except_clause(n0,n2,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  final public suite suite() throws ParseException {
   NodeChoice n0;
   simple_stmt n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   stmt n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case IMPORT:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n1 = simple_stmt();
        n0 = new NodeChoice(n1, 0);
      break;
    case NEWLINE:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(NEWLINE);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(INDENT);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
      label_13:
      while (true) {
        n8 = stmt();
           n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case IF:
        case WHILE:
        case FOR:
        case TRY:
        case DEF:
        case CLASS:
        case PRINT:
        case PASS:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case YIELD:
        case IMPORT:
        case FROM:
        case DEL:
        case RAISE:
        case GLOBAL:
        case EXEC:
        case ASSERT:
        case AS:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 135:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_13;
        }
      }
        n7.nodes.trimToSize();
        n2.addNode(n7);
      n10 = jj_consume_token(DEDENT);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new suite(n0);}
    throw new Error("Missing return statement in function");
  }

  final public test test() throws ParseException {
   NodeChoice n0;
   lambdef n1;
   NodeSequence n2;
   and_test n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   and_test n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAMBDA:
      n1 = lambdef();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
        n2 = new NodeSequence(2);
      n3 = and_test();
        n2.addNode(n3);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR_BOOL:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_14;
        }
           n5 = new NodeSequence(2);
        n7 = jj_consume_token(OR_BOOL);
                        n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
        n8 = and_test();
           n5.addNode(n8);
           n4.addNode(n5);
      }
        n4.nodes.trimToSize();
        n2.addNode(n4);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new test(n0);}
    throw new Error("Missing return statement in function");
  }

  final public and_test and_test() throws ParseException {
   not_test n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   not_test n5;
    n0 = not_test();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_BOOL:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(AND_BOOL);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = not_test();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new and_test(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public not_test not_test() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   not_test n4;
   comparison n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_BOOL:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(NOT_BOOL);
                      n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = not_test();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n5 = comparison();
        n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new not_test(n0);}
    throw new Error("Missing return statement in function");
  }

  final public comparison comparison() throws ParseException {
   expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   comp_op n3;
   expr n4;
    n0 = expr();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case LESS:
      case EQEQUAL:
      case EQLESS:
      case EQGREATER:
      case LESSGREATER:
      case NOTEQUAL:
      case NOT_BOOL:
      case IS:
      case IN:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_16;
      }
        n2 = new NodeSequence(2);
      n3 = comp_op();
        n2.addNode(n3);
      n4 = expr();
        n2.addNode(n4);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new comparison(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public comp_op comp_op() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      n2 = jj_consume_token(LESS);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case GREATER:
      n4 = jj_consume_token(GREATER);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case EQEQUAL:
      n6 = jj_consume_token(EQEQUAL);
                     n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case EQGREATER:
      n8 = jj_consume_token(EQGREATER);
                       n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case EQLESS:
      n10 = jj_consume_token(EQLESS);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LESSGREATER:
      n12 = jj_consume_token(LESSGREATER);
                          n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case NOTEQUAL:
      n14 = jj_consume_token(NOTEQUAL);
                       n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case IN:
      n16 = jj_consume_token(IN);
                 n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case NOT_BOOL:
        n17 = new NodeSequence(2);
      n19 = jj_consume_token(NOT_BOOL);
                       n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n21 = jj_consume_token(IN);
                 n20 = JTBToolkit.makeNodeToken(n21);
        n17.addNode(n20);
        n0 = new NodeChoice(n17, 8);
      break;
    default:
      jj_la1[52] = jj_gen;
      if (jj_2_11(2)) {
        n22 = new NodeSequence(3);
        n24 = jj_consume_token(IS);
                 n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
        n26 = jj_consume_token(NOT_BOOL);
                       n25 = JTBToolkit.makeNodeToken(n26);
        n22.addNode(n25);
        n0 = new NodeChoice(n22, 9);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS:
          n28 = jj_consume_token(IS);
                 n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 10);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new comp_op(n0);}
    throw new Error("Missing return statement in function");
  }

  final public expr expr() throws ParseException {
   xor_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   xor_expr n5;
    n0 = xor_expr();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_17;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OR);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = xor_expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public xor_expr xor_expr() throws ParseException {
   and_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   and_expr n5;
    n0 = and_expr();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_18;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(XOR);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = and_expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new xor_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public and_expr and_expr() throws ParseException {
   shift_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   shift_expr n5;
    n0 = shift_expr();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_19;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(AND);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = shift_expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new and_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public shift_expr shift_expr() throws ParseException {
   arith_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   arith_expr n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   arith_expr n10;
    n0 = arith_expr();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSHIFT:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
           n3 = new NodeSequence(2);
        n5 = jj_consume_token(LSHIFT);
                       n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = arith_expr();
           n3.addNode(n6);
           n2 = new NodeChoice(n3, 0);
        break;
      case RSHIFT:
           n7 = new NodeSequence(2);
        n9 = jj_consume_token(RSHIFT);
                       n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        n10 = arith_expr();
           n7.addNode(n10);
           n2 = new NodeChoice(n7, 1);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new shift_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public arith_expr arith_expr() throws ParseException {
   term n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   term n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   term n10;
    n0 = term();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
           n3 = new NodeSequence(2);
        n5 = jj_consume_token(PLUS);
                     n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = term();
           n3.addNode(n6);
           n2 = new NodeChoice(n3, 0);
        break;
      case MINUS:
           n7 = new NodeSequence(2);
        n9 = jj_consume_token(MINUS);
                      n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        n10 = term();
           n7.addNode(n10);
           n2 = new NodeChoice(n7, 1);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new arith_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public term term() throws ParseException {
   factor n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   factor n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   factor n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   factor n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   factor n18;
    n0 = factor();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case FLOORDIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
           n3 = new NodeSequence(2);
        n5 = jj_consume_token(MULTIPLY);
                         n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = factor();
           n3.addNode(n6);
           n2 = new NodeChoice(n3, 0);
        break;
      case DIVIDE:
           n7 = new NodeSequence(2);
        n9 = jj_consume_token(DIVIDE);
                       n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        n10 = factor();
           n7.addNode(n10);
           n2 = new NodeChoice(n7, 1);
        break;
      case FLOORDIVIDE:
           n11 = new NodeSequence(2);
        n13 = jj_consume_token(FLOORDIVIDE);
                             n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
        n14 = factor();
           n11.addNode(n14);
           n2 = new NodeChoice(n11, 2);
        break;
      case MODULO:
           n15 = new NodeSequence(2);
        n17 = jj_consume_token(MODULO);
                        n16 = JTBToolkit.makeNodeToken(n17);
           n15.addNode(n16);
        n18 = factor();
           n15.addNode(n18);
           n2 = new NodeChoice(n15, 3);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new term(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public factor factor() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   factor n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   factor n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   factor n12;
   power n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(PLUS);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = factor();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(MINUS);
                   n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = factor();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 1);
      break;
    case NOT:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(NOT);
                  n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = factor();
        n9.addNode(n12);
        n0 = new NodeChoice(n9, 2);
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n13 = power();
        n0 = new NodeChoice(n13, 3);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new factor(n0);}
    throw new Error("Missing return statement in function");
  }

  final public power power() throws ParseException {
   atomtrailer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   factor n5;
    n0 = atomtrailer();
    label_23:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_23;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(POWER);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = factor();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new power(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public atomtrailer atomtrailer() throws ParseException {
   atom n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   arglist n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   subscriptlist n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   AnyName n23;
    n0 = atom();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_24;
      }
      if (jj_2_13(2)) {
           n3 = new NodeSequence(3);
        n5 = jj_consume_token(LPAREN);
                       n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n7 = jj_consume_token(RPAREN);
                       n6 = JTBToolkit.makeNodeToken(n7);
           n3.addNode(n6);
           n2 = new NodeChoice(n3, 0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
           n8 = new NodeSequence(3);
          n10 = jj_consume_token(LPAREN);
                        n9 = JTBToolkit.makeNodeToken(n10);
           n8.addNode(n9);
          n11 = arglist();
           n8.addNode(n11);
          n13 = jj_consume_token(RPAREN);
                        n12 = JTBToolkit.makeNodeToken(n13);
           n8.addNode(n12);
           n2 = new NodeChoice(n8, 1);
          break;
        case LBRACKET:
           n14 = new NodeSequence(3);
          n16 = jj_consume_token(LBRACKET);
                          n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
          n17 = subscriptlist();
           n14.addNode(n17);
          n19 = jj_consume_token(RBRACKET);
                          n18 = JTBToolkit.makeNodeToken(n19);
           n14.addNode(n18);
           n2 = new NodeChoice(n14, 2);
          break;
        case DOT:
           n20 = new NodeSequence(2);
          n22 = jj_consume_token(DOT);
                     n21 = JTBToolkit.makeNodeToken(n22);
           n20.addNode(n21);
          n23 = AnyName();
           n20.addNode(n23);
           n2 = new NodeChoice(n20, 3);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new atomtrailer(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public atom atom() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   SmartTestList n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   listmaker n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23 = new NodeOptional();
   dictmaker n24;
   NodeToken n25;
   Token n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   SmartTestList n30;
   NodeToken n31;
   Token n32;
   Name n33;
   PythonNumber n34;
   NodeSequence n35;
   PythonString n36;
   NodeListOptional n37 = new NodeListOptional();
   PythonString n38;
    if (jj_2_14(2)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LPAREN);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(RPAREN);
                    n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n6 = new NodeSequence(3);
        n8 = jj_consume_token(LPAREN);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case AS:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 135:
          n10 = SmartTestList();
           n9.addNode(n10);
          break;
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        n6.addNode(n9);
        n12 = jj_consume_token(RPAREN);
                     n11 = JTBToolkit.makeNodeToken(n12);
        n6.addNode(n11);
        n0 = new NodeChoice(n6, 1);
        break;
      case LBRACKET:
        n13 = new NodeSequence(3);
        n15 = jj_consume_token(LBRACKET);
                       n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case AS:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 135:
          n17 = listmaker();
           n16.addNode(n17);
          break;
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        n13.addNode(n16);
        n19 = jj_consume_token(RBRACKET);
                       n18 = JTBToolkit.makeNodeToken(n19);
        n13.addNode(n18);
        n0 = new NodeChoice(n13, 2);
        break;
      case LBRACE:
        n20 = new NodeSequence(3);
        n22 = jj_consume_token(LBRACE);
                     n21 = JTBToolkit.makeNodeToken(n22);
        n20.addNode(n21);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case AS:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 135:
          n24 = dictmaker();
           n23.addNode(n24);
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        n20.addNode(n23);
        n26 = jj_consume_token(RBRACE);
                     n25 = JTBToolkit.makeNodeToken(n26);
        n20.addNode(n25);
        n0 = new NodeChoice(n20, 3);
        break;
      case 135:
        n27 = new NodeSequence(3);
        n29 = jj_consume_token(135);
                n28 = JTBToolkit.makeNodeToken(n29);
        n27.addNode(n28);
        n30 = SmartTestList();
        n27.addNode(n30);
        n32 = jj_consume_token(135);
                n31 = JTBToolkit.makeNodeToken(n32);
        n27.addNode(n31);
        n0 = new NodeChoice(n27, 4);
        break;
      case AS:
      case NAME:
        n33 = Name();
        n0 = new NodeChoice(n33, 5);
        break;
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
        n34 = PythonNumber();
        n0 = new NodeChoice(n34, 6);
        break;
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
        n35 = new NodeSequence(2);
        n36 = PythonString();
        n35.addNode(n36);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SINGLE_STRING:
          case SINGLE_STRING2:
          case TRIPLE_STRING:
          case TRIPLE_STRING2:
          case SINGLE_USTRING:
          case SINGLE_USTRING2:
          case TRIPLE_USTRING:
          case TRIPLE_USTRING2:
            ;
            break;
          default:
            jj_la1[69] = jj_gen;
            break label_25;
          }
          n38 = PythonString();
           n37.addNode(n38);
        }
        n37.nodes.trimToSize();
        n35.addNode(n37);
        n0 = new NodeChoice(n35, 7);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new atom(n0);}
    throw new Error("Missing return statement in function");
  }

  final public lambdef lambdef() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   varargslist n3;
   NodeToken n4;
   Token n5;
   test n6;
    n1 = jj_consume_token(LAMBDA);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MULTIPLY:
    case POWER:
    case AS:
    case NAME:
      n3 = varargslist();
        n2.addNode(n3);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    n5 = jj_consume_token(COLON);
                n4 = JTBToolkit.makeNodeToken(n5);
    n6 = test();
     {if (true) return new lambdef(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public subscriptlist subscriptlist() throws ParseException {
   subscript n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   subscript n5;
   NodeOptional n6 = new NodeOptional();
   Comma n7;
    n0 = subscript();
    label_26:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_26;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = subscript();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n7 = Comma();
        n6.addNode(n7);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
     {if (true) return new subscriptlist(n0,n1,n6);}
    throw new Error("Missing return statement in function");
  }

  final public subscript subscript() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   test n9;
   NodeOptional n10 = new NodeOptional();
   slice n11;
   slice n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(DOT);
                 n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(DOT);
                 n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(DOT);
                 n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
        n8 = new NodeSequence(2);
      n9 = test();
        n8.addNode(n9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        n11 = slice();
           n10.addNode(n11);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
        n8.addNode(n10);
        n0 = new NodeChoice(n8, 1);
      break;
    case COLON:
      n12 = slice();
        n0 = new NodeChoice(n12, 2);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new subscript(n0);}
    throw new Error("Missing return statement in function");
  }

  final public slice slice() throws ParseException {
   Colon n0;
   NodeOptional n1 = new NodeOptional();
   test n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   Colon n5;
   NodeOptional n6;
   test n7;
    n0 = Colon();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
      n2 = test();
        n1.addNode(n2);
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
        n6 = new NodeOptional();
        n4 = new NodeSequence(2);
      n5 = Colon();
        n4.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case AS:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 135:
        n7 = test();
           n6.addNode(n7);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
        n4.addNode(n6);
        n3.addNode(n4);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
     {if (true) return new slice(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public Colon Colon() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(COLON);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Colon(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Comma Comma() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(COMMA);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Comma(n0);}
    throw new Error("Missing return statement in function");
  }

  final public exprlist exprlist() throws ParseException {
   expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   expr n5;
   NodeOptional n6 = new NodeOptional();
   Comma n7;
    n0 = expr();
    label_27:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_27;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n7 = Comma();
        n6.addNode(n7);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
     {if (true) return new exprlist(n0,n1,n6);}
    throw new Error("Missing return statement in function");
  }

  final public SmartTestList SmartTestList() throws ParseException {
   test n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   test n5;
   NodeOptional n6 = new NodeOptional();
   Comma n7;
    n0 = test();
    label_28:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_28;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = test();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n7 = Comma();
        n6.addNode(n7);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
     {if (true) return new SmartTestList(n0,n1,n6);}
    throw new Error("Missing return statement in function");
  }

  final public testlist testlist() throws ParseException {
   test n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   test n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
    n0 = test();
    label_29:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_29;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = test();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n8 = jj_consume_token(COMMA);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
     {if (true) return new testlist(n0,n1,n6);}
    throw new Error("Missing return statement in function");
  }

  final public dictmaker dictmaker() throws ParseException {
   test n0;
   NodeToken n1;
   Token n2;
   test n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   test n8;
   NodeToken n9;
   Token n10;
   test n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
    n0 = test();
    n2 = jj_consume_token(COLON);
                n1 = JTBToolkit.makeNodeToken(n2);
    n3 = test();
    label_30:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_30;
      }
        n5 = new NodeSequence(4);
      n7 = jj_consume_token(COMMA);
                   n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = test();
        n5.addNode(n8);
      n10 = jj_consume_token(COLON);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
      n11 = test();
        n5.addNode(n11);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n14 = jj_consume_token(COMMA);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
     {if (true) return new dictmaker(n0,n1,n3,n4,n12);}
    throw new Error("Missing return statement in function");
  }

  final public listmaker listmaker() throws ParseException {
   test n0;
   NodeChoice n1;
   NodeList n2 = new NodeList();
   list_for n3;
   NodeSequence n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   test n9;
   NodeOptional n10 = new NodeOptional();
   Comma n11;
    n0 = test();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      label_31:
      while (true) {
        n3 = list_for();
              n2.addNode(n3);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_31;
        }
      }
           n2.nodes.trimToSize();
           n1 = new NodeChoice(n2, 0);
      break;
    default:
      jj_la1[84] = jj_gen;
           n4 = new NodeSequence(2);
      label_32:
      while (true) {
        if (jj_2_20(2)) {
          ;
        } else {
          break label_32;
        }
              n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                         n7 = JTBToolkit.makeNodeToken(n8);
              n6.addNode(n7);
        n9 = test();
              n6.addNode(n9);
              n5.addNode(n6);
      }
           n5.nodes.trimToSize();
           n4.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n11 = Comma();
              n10.addNode(n11);
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
           n4.addNode(n10);
           n1 = new NodeChoice(n4, 1);
    }
     {if (true) return new listmaker(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public list_for list_for() throws ParseException {
   NodeToken n0;
   Token n1;
   exprlist n2;
   NodeToken n3;
   Token n4;
   SmartTestList n5;
   NodeListOptional n6 = new NodeListOptional();
   list_if n7;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = exprlist();
    n4 = jj_consume_token(IN);
             n3 = JTBToolkit.makeNodeToken(n4);
    n5 = SmartTestList();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_33;
      }
      n7 = list_if();
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
     {if (true) return new list_for(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public list_if list_if() throws ParseException {
   NodeToken n0;
   Token n1;
   test n2;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = test();
     {if (true) return new list_if(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public classdef classdef() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   testlist n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   suite n12;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
        n4 = new NodeSequence(3);
      n6 = jj_consume_token(LPAREN);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = testlist();
        n4.addNode(n7);
      n9 = jj_consume_token(RPAREN);
                    n8 = JTBToolkit.makeNodeToken(n9);
        n4.addNode(n8);
        n3.addNode(n4);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    n11 = jj_consume_token(COLON);
                 n10 = JTBToolkit.makeNodeToken(n11);
    n12 = suite();
     {if (true) return new classdef(n0,n2,n3,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  final public arglist arglist() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   normalargs n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeChoice n8;
   NodeSequence n9;
   ExtraArgValueList n10;
   NodeOptional n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   ExtraKeywordValueList n15;
   ExtraKeywordValueList n16;
   NodeOptional n17 = new NodeOptional();
   NodeChoice n18;
   NodeSequence n19;
   ExtraArgValueList n20;
   NodeOptional n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   ExtraKeywordValueList n25;
   ExtraKeywordValueList n26;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case OR_BOOL:
    case AND_BOOL:
    case NOT_BOOL:
    case IS:
    case IN:
    case LAMBDA:
    case IF:
    case ELSE:
    case ELIF:
    case WHILE:
    case FOR:
    case TRY:
    case EXCEPT:
    case DEF:
    case CLASS:
    case FINALLY:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case IMPORT:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 135:
        n1 = new NodeSequence(2);
      n2 = normalargs();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
           n7 = new NodeOptional();
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(COMMA);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case POWER:
              n11 = new NodeOptional();
          if (jj_2_21(2)) {
                 n9 = new NodeSequence(3);
            n10 = ExtraArgValueList();
                 n9.addNode(n10);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
                    n12 = new NodeSequence(2);
              n14 = jj_consume_token(COMMA);
                                n13 = JTBToolkit.makeNodeToken(n14);
                    n12.addNode(n13);
              n15 = ExtraKeywordValueList();
                    n12.addNode(n15);
                    n11.addNode(n12);
              break;
            default:
              jj_la1[87] = jj_gen;
              ;
            }
                 n9.addNode(n11);
                 n8 = new NodeChoice(n9, 0);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MULTIPLY:
            case POWER:
              n16 = ExtraKeywordValueList();
                 n8 = new NodeChoice(n16, 1);
              break;
            default:
              jj_la1[88] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
              n7.addNode(n8);
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
           n4.addNode(n7);
           n3.addNode(n4);
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[94] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case POWER:
           n21 = new NodeOptional();
        if (jj_2_22(2)) {
              n19 = new NodeSequence(3);
          n20 = ExtraArgValueList();
              n19.addNode(n20);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
                 n22 = new NodeSequence(2);
            n24 = jj_consume_token(COMMA);
                             n23 = JTBToolkit.makeNodeToken(n24);
                 n22.addNode(n23);
            n25 = ExtraKeywordValueList();
                 n22.addNode(n25);
                 n21.addNode(n22);
            break;
          default:
            jj_la1[91] = jj_gen;
            ;
          }
              n19.addNode(n21);
              n18 = new NodeChoice(n19, 0);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MULTIPLY:
          case POWER:
            n26 = ExtraKeywordValueList();
              n18 = new NodeChoice(n26, 1);
            break;
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
           n17.addNode(n18);
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
        n0 = new NodeChoice(n17, 1);
    }
     {if (true) return new arglist(n0);}
    throw new Error("Missing return statement in function");
  }

  final public normalargs normalargs() throws ParseException {
   argument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   argument n5;
    n0 = argument();
    label_34:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_34;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = argument();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new normalargs(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExtraArgValueList ExtraArgValueList() throws ParseException {
   NodeToken n0;
   Token n1;
   test n2;
    n1 = jj_consume_token(MULTIPLY);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = test();
     {if (true) return new ExtraArgValueList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExtraKeywordValueList ExtraKeywordValueList() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   test n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
      n2 = jj_consume_token(POWER);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MULTIPLY:
           n3 = new NodeSequence(2);
      n5 = jj_consume_token(MULTIPLY);
                         n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      n7 = jj_consume_token(MULTIPLY);
                         n6 = JTBToolkit.makeNodeToken(n7);
           n3.addNode(n6);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n8 = test();
     {if (true) return new ExtraKeywordValueList(n0,n8);}
    throw new Error("Missing return statement in function");
  }

  final public argument argument() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   AnyName n2;
   NodeToken n3;
   Token n4;
   test n5;
    if (jj_2_24(2)) {
        n1 = new NodeSequence(2);
      n2 = AnyName();
        n1.addNode(n2);
      n4 = jj_consume_token(EQUAL);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0.addNode(n1);
    } else {
      ;
    }
    n5 = test();
     {if (true) return new argument(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  final public PythonNumber PythonNumber() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEXNUMBER:
      n2 = jj_consume_token(HEXNUMBER);
                       n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case OCTNUMBER:
      n4 = jj_consume_token(OCTNUMBER);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case DECNUMBER:
      n6 = jj_consume_token(DECNUMBER);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case FLOAT:
      n8 = jj_consume_token(FLOAT);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case COMPLEX:
      n10 = jj_consume_token(COMPLEX);
                      n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PythonNumber(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Complex Complex() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOAT);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Complex(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Name Name() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      n2 = jj_consume_token(NAME);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case AS:
      n4 = jj_consume_token(AS);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Name(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PythonString PythonString() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLE_STRING:
      n2 = jj_consume_token(SINGLE_STRING);
                           n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case SINGLE_STRING2:
      n4 = jj_consume_token(SINGLE_STRING2);
                            n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case TRIPLE_STRING:
      n6 = jj_consume_token(TRIPLE_STRING);
                           n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case TRIPLE_STRING2:
      n8 = jj_consume_token(TRIPLE_STRING2);
                            n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case SINGLE_USTRING:
      n10 = jj_consume_token(SINGLE_USTRING);
                             n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case SINGLE_USTRING2:
      n12 = jj_consume_token(SINGLE_USTRING2);
                              n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case TRIPLE_USTRING:
      n14 = jj_consume_token(TRIPLE_USTRING);
                             n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case TRIPLE_USTRING2:
      n16 = jj_consume_token(TRIPLE_USTRING2);
                              n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PythonString(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AnyName AnyName() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      n2 = jj_consume_token(NAME);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case OR_BOOL:
      n4 = jj_consume_token(OR_BOOL);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case AND_BOOL:
      n6 = jj_consume_token(AND_BOOL);
                      n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case NOT_BOOL:
      n8 = jj_consume_token(NOT_BOOL);
                      n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case IS:
      n10 = jj_consume_token(IS);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case IN:
      n12 = jj_consume_token(IN);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case LAMBDA:
      n14 = jj_consume_token(LAMBDA);
                     n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case IF:
      n16 = jj_consume_token(IF);
                 n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case ELSE:
      n18 = jj_consume_token(ELSE);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case ELIF:
      n20 = jj_consume_token(ELIF);
                   n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case WHILE:
      n22 = jj_consume_token(WHILE);
                    n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case FOR:
      n24 = jj_consume_token(FOR);
                  n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case TRY:
      n26 = jj_consume_token(TRY);
                  n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case EXCEPT:
      n28 = jj_consume_token(EXCEPT);
                     n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case DEF:
      n30 = jj_consume_token(DEF);
                  n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case CLASS:
      n32 = jj_consume_token(CLASS);
                    n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case FINALLY:
      n34 = jj_consume_token(FINALLY);
                      n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case PRINT:
      n36 = jj_consume_token(PRINT);
                    n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case PASS:
      n38 = jj_consume_token(PASS);
                   n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case BREAK:
      n40 = jj_consume_token(BREAK);
                    n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case CONTINUE:
      n42 = jj_consume_token(CONTINUE);
                       n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    case RETURN:
      n44 = jj_consume_token(RETURN);
                     n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
      break;
    case YIELD:
      n46 = jj_consume_token(YIELD);
                    n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
      break;
    case IMPORT:
      n48 = jj_consume_token(IMPORT);
                     n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
      break;
    case FROM:
      n50 = jj_consume_token(FROM);
                   n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
      break;
    case DEL:
      n52 = jj_consume_token(DEL);
                  n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
      break;
    case RAISE:
      n54 = jj_consume_token(RAISE);
                    n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
      break;
    case GLOBAL:
      n56 = jj_consume_token(GLOBAL);
                     n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
      break;
    case EXEC:
      n58 = jj_consume_token(EXEC);
                   n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
      break;
    case ASSERT:
      n60 = jj_consume_token(ASSERT);
                     n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
      break;
    case AS:
      n62 = jj_consume_token(AS);
                 n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AnyName(n0);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(TRIPLE_STRING2)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(TRIPLE_STRING)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(SINGLE_STRING2)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(SINGLE_STRING)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(135)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(COMPLEX)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(DECNUMBER)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(OCTNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(HEXNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(YIELD)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(ASSERT)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(EXEC)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(NOT_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(DEL)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(YIELD)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(PASS)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(FINALLY)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(ASSERT)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(EXCEPT)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(PASS)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(DEL)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(EXEC)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(NOT_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(AND_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(OR_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(RSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(TRIPLE_USTRING2)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(TRIPLE_USTRING)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(SINGLE_USTRING2)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(SINGLE_USTRING)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_148()) return true;
    return false;
  }

  public PythonParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[100];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x30540040,0x40040000,0x2000000,0x2000000,0x40000000,0x40040000,0x40000000,0x0,0x40000,0x2000000,0x30540000,0x1000000,0x30540000,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x0,0x30540000,0x2000000,0x2000000,0x30540000,0x0,0x2000000,0x2000000,0x40000000,0x0,0x4000000,0x0,0x2000000,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x30540000,0x30540000,0x30540040,0x0,0x30540000,0x0,0x30540000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0x30540000,0x4440000,0x4440000,0x30540000,0x30540000,0x30540000,0x0,0x540000,0x40040000,0x2000000,0x8000000,0x3c540000,0x30540000,0x30540000,0x8000000,0x2000000,0x2000000,0x2000000,0x2000000,0x0,0x2000000,0x0,0x0,0x40000,0x2000000,0x40000000,0x40000000,0x2000000,0x2000000,0x40000000,0x40000000,0x30540000,0x40000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x80000020,0x2,0x0,0x0,0x2,0x2,0x2,0x200,0x0,0x0,0x80000020,0x0,0x80000020,0x200,0x1ffe0000,0x0,0x0,0x0,0x0,0x0,0x80000020,0x0,0x0,0x80000020,0x0,0x0,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000020,0x80000020,0x80000020,0x20000000,0x80000020,0x40000000,0x80000020,0x8001fc00,0x8001fc00,0x0,0x80,0x40,0x100,0xc,0xc,0x0,0x0,0x11,0x11,0x20,0x0,0x0,0x80000020,0x80000020,0x80000020,0x0,0x0,0x2,0x0,0x0,0x80000020,0x80000020,0x80000020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x2,0x2,0xe0000020,0x2,0x0,0x0,0x0,0xe0000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0xefffedcc,0xc000000,0x0,0x0,0x0,0xc000000,0x0,0x0,0xc000000,0x0,0xefffedcc,0x0,0xefffe004,0x0,0x0,0x0,0x0,0x0,0x2000,0x478000,0xec000004,0x0,0x0,0xec000004,0x180000,0x0,0x0,0xfffffff,0x4000000,0x0,0x4000000,0x0,0x0,0x2,0x0,0xdc8,0x20,0x10,0x10,0x10,0x200,0x10,0x1200,0x0,0xec000004,0xefffedcc,0xefffe004,0x0,0xec000004,0x0,0xec000000,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xec000000,0x0,0x0,0xec000004,0xec000004,0xec000004,0x0,0xec000000,0xc000000,0x0,0x0,0xec000004,0xec000004,0xec000004,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x80,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefffffff,0x0,0xe0000000,0xc000000,0x0,0xfffffff,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0xff003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff003,0x0,0xff003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff003,0x0,0x0,0xff003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff003,0xff003,0xff003,0x0,0xff003,0x0,0xff003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff003,0x0,0x0,0xff003,0xff003,0xff003,0xff000,0xff003,0x0,0x0,0x0,0xff003,0xff003,0xff003,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff003,0x0,0x3,0x0,0xff000,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x80,0x80,0x0,0x80,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[24];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PythonParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PythonParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PythonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PythonParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PythonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PythonParser(PythonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PythonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[136];
    for (int i = 0; i < 136; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 100; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 136; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
