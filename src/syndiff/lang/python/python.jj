// Modified by Grant Jenks
// For SynDiff

// -*- java -*-
// Copyright © Corporation for National Research Initiatives

options
{
    STATIC = false;                          // multiple parsers
    COMMON_TOKEN_ACTION = true;              // CommonTokenAction(Token)
}

PARSER_BEGIN(PythonParser)
package lang.python;
public class PythonParser {}
PARSER_END(PythonParser)

TOKEN_MGR_DECLS:
{
    int indentation[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;

    boolean expect_indent = false;

    boolean compound = false;

    public boolean single_input = false;

    // parsing of partial sentence (interactive) mode
    public boolean partial = false;
    // control whether empty new lines on EOF force sentence closing NEWLINE even if indent
    // is expected,i.e. classic behavior at jython prompt (different from codeop behavior)
    public boolean stdprompt = false;

    public boolean generator_allowed = true;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.image = "<DEDENT>";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        /*
           if not partial: EOF is expanded to token sequences comprising
               if single_input: [NEWLINE] necessary DEDENT NEWLINE (afterward EOF)
               otherwise      : [NEWLINE] necessary DEDENT EOF
           if partial: EOF expansion happens only if EOF preceded by empty line (etc),
           i.e. lexer is in MAYBE_FORCE_NEWLINE_IF_EOF state
        */
        // TODO : change 1 to EOF
        if (t.kind == 1) {
            // System.out.println("EOF: "+single_input+", "+curLexState+", "+level);
            if (!partial || curLexState == MAYBE_FORCE_NEWLINE_IF_EOF) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                }
                else {
                    t.kind = DEDENT;
                    if (level >= 0) level -= 1;
                }
                while (level >= 0) {
                    level--;
                    t = addDedent(t);
                }
                if (!single_input) {
                // TODO : change 1 to EOF
                    t.kind = 1;
                    t.image = "<EOF>";
                } else {
                    t.kind = NEWLINE;
                    t.image = "<FORCENL>";
                    single_input = false;
                }
            }
        } else if (t.kind == YIELD) {
            if (!generator_allowed) {
                t.kind = NAME;
            }
        }
    }

    void indenting(int ind) {
        indent = ind;
        if (indent == indentation[level])
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }
}


SKIP :
{
    <SPACE: " ">
|   "\t"
|   "\014"
|   <CONTINUATION: ("\\") ("\r\n"|"\n"|"\r")>
|   <NEWLINE1: ("\r\n"|"\n"|"\r")>
        {
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
        }
}


<FORCE_NEWLINE1> TOKEN :
{ <NEWLINE: ("\n" | "\r")> : INDENTATION_UNCHANGED }


<FORCE_NEWLINE2> TOKEN :
{ <NEWLINE2: ("\n" | "\r")> { matchedToken.kind = NEWLINE; }: INDENTING }


// causes expected warning
<MAYBE_FORCE_NEWLINE_IF_EOF> SKIP :
{
    <""> { indenting(0); }
}

<INDENTING, INDENTATION_UNCHANGED> SKIP :
{
    "\t"
        { indenting((indent/8+1)*8); }
|   " "
        { indenting(indent+1); }
|   "\014"
        { indenting(0); }
|   <CRLF1: ("\r\n" | "\n" | "\r")>
        {
            //System.out.println("empty line");
            // if partial single_input (interactive) mode,
            // empty line (indent==0), and no parens open
            // or indentetion expected (if stdprompt == true, ovveride last cond)
            // consider forcing sentence closing NEWLINE if EOF
            if (partial && single_input && indent == 0 &&
                           parens == 0  && (stdprompt || !expect_indent)) {
                //System.out.println("force newline");
                //backup a character!
                // - input_stream.backup(1); -
                SwitchTo(MAYBE_FORCE_NEWLINE_IF_EOF);
            }
            else
                indenting(0);
        }
}


<INDENTATION_UNCHANGED> SKIP :
{
    <""> : DEFAULT
}


<INDENTING> TOKEN :
{
    <DEDENT: "">
        {
            if (indent > indentation[level]) {
                level++;
                indentation[level] = indent;
                matchedToken.kind=INDENT;
                matchedToken.image = "<INDENT>";
            }
            else if (level > 0) {
                Token t = matchedToken;
                level -= 1;
                while (level > 0 && indent < indentation[level]) {
                    level--;
                    t = addDedent(t);
                }
                if (indent != indentation[level]) {
                    throw new TokenMgrError("inconsistent dedent", 0);
                }
                t.next = null;
            }
        } : DEFAULT
}


<UNREACHABLE> TOKEN :
{
    < INDENT:"<INDENT>">
//|     < DEDENT:"<DEDENT>">
}


<DEFAULT> SPECIAL_TOKEN: /* COMMENTS */
{
    <TRAILING_COMMENT: "#" (~["\n","\r"])* >
}

<INDENTING, INDENTATION_UNCHANGED> SPECIAL_TOKEN: /* COMMENTS */
{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> {
        indenting(0);
    }
}


TOKEN : /* SEPARATORS */
{
    < LPAREN: "(" > {parens++;}
|   < RPAREN: ")" > {parens--;}
|   < LBRACE: "{" > {parens++;}
|   < RBRACE: "}" > {parens--;}
|   < LBRACKET: "[" > {parens++;}
|   < RBRACKET: "]" > {parens--;}
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
}


TOKEN : /* OPERATORS */
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < FLOORDIVIDE: "//" >
|   < POWER: "**" >
|   < LSHIFT: "<<" >
|   < RSHIFT: ">>" >
|   < MODULO: "%" >
|   < NOT: "~" >
|   < XOR: "^" >
|   < OR: "|" >
|   < AND: "&" >
|   < EQUAL: "=" >
|   < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < LESSGREATER: "<>" >
|   < NOTEQUAL: "!=" >
|   < PLUSEQ: "+=" >
|   < MINUSEQ: "-=" >
|   < MULTIPLYEQ: "*=" >
|   < DIVIDEEQ: "/=" >
|   < FLOORDIVIDEEQ: "//=" >
|   < MODULOEQ: "%=" >
|   < ANDEQ: "&=" >
|   < OREQ: "|=" >
|   < XOREQ: "^=" >
|   < LSHIFTEQ: "<<=" >
|   < RSHIFTEQ: ">>=" >
|   < POWEREQ: "**=" >
}

TOKEN : /* KEYWORDS */
{
    < OR_BOOL: "or" >
|   < AND_BOOL: "and" >
|   < NOT_BOOL: "not" >
|   < IS: "is" >
|   < IN: "in" >
|   < LAMBDA: "lambda" >
|   < IF: "if" >
|   < ELSE: "else" >
|   < ELIF: "elif" >
|   < WHILE: "while" >
|   < FOR: "for" >
|   < TRY: "try" >
|   < EXCEPT: "except" >
|   < DEF: "def" >
|   < CLASS: "class" >
|   < FINALLY: "finally" >
|   < PRINT: "print" >
|   < PASS: "pass" >
|   < BREAK: "break" >
|   < CONTINUE: "continue" >
|   < RETURN: "return" >
|   < YIELD: "yield" >
|   < IMPORT: "import" >
|   < FROM: "from" >
|   < DEL: "del" >
|   < RAISE: "raise" >
|   < GLOBAL: "global" >
|   < EXEC: "exec" >
|   < ASSERT: "assert" >
|   < AS: "as" >
}


TOKEN : /* Python identifiers */
{
    < NAME: <LETTER> ( <LETTER> | <DIGIT>)* >
|   < #LETTER: ["_","a"-"z","A"-"Z"] >
}


TOKEN : /* Numeric literals */
{
    < DECNUMBER:
        ["1"-"9"] (["0"-"9"])* (["l", "L"])?
      | "0"
      >
|   < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
|   < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
|
    < FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      >
|   < COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"]>
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < #DIGIT: ["0" - "9"] >
}

/*TOKEN : { <STRING: (["r", "R"])? ["'", "\"", "'''", "\"\"\""] >
    {
        int nquotes = matchedToken.image.length() > 2 ? 3 : 1;
        char quote = matchedToken.image.charAt(matchedToken.image.length()-1);

    }
}*/


MORE : /* Strings */
{
    < (["u", "U"]) (["r", "R"])? "'" > :  IN_USTRING11
|   < (["u", "U"]) (["r", "R"])? "\"" > :  IN_USTRING21
|   < (["u", "U"]) (["r", "R"])? "'''" > :  IN_USTRING13
|   < (["u", "U"]) (["r", "R"])? "\"\"\"" > :  IN_USTRING23
|   < (["r", "R"])? "'" > :  IN_STRING11
|   < (["r", "R"])? "\"" > :  IN_STRING21
|   < (["r", "R"])? "'''" > :  IN_STRING13
|   < (["r", "R"])? "\"\"\"" > :  IN_STRING23
}

<IN_STRING11> TOKEN : { <SINGLE_STRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING21> TOKEN : { <SINGLE_STRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING13> TOKEN : { <TRIPLE_STRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING23> TOKEN : { <TRIPLE_STRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_USTRING11> TOKEN : { <SINGLE_USTRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING21> TOKEN : { <SINGLE_USTRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING13> TOKEN : { <TRIPLE_USTRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING23> TOKEN : { <TRIPLE_USTRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_STRING11> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING1NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING1NLC
}

<IN_STRING21> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING2NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING2NLC
}

<IN_USTRING11> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_USTRING1NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_USTRING1NLC
}

<IN_USTRING21> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_USTRING2NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_USTRING2NLC
}

<IN_STRING1NLC> MORE:
{
 <""> : IN_STRING11
}

<IN_STRING2NLC> MORE:
{
 <""> : IN_STRING21
}

<IN_USTRING1NLC> MORE:
{
 <""> : IN_USTRING11
}

<IN_USTRING2NLC> MORE:
{
 <""> : IN_USTRING21
}

<IN_STRING11, IN_USTRING11> MORE: { <("\\" ("\\"|"'")) | ~["\n","\r"]> }
<IN_STRING21, IN_USTRING21> MORE: { <("\\" ("\\"|"\"")) | ~["\n","\r"]> }

<IN_STRING13, IN_STRING23, IN_USTRING13, IN_USTRING23> MORE:
{
    <"\r\n"> {
        int l = image.length();
        image.setLength(l-1);
        image.setCharAt(l-2, '\n');
    }
|   <"\n">
|   <"\r"> { image.setCharAt(image.length()-1, '\n'); }
|   <~["\n","\r"]>
|   <"\\" ~["\n","\r"]>
}

//file_input: (NEWLINE | stmt)* ENDMARKER
void file_input() : 
{}
{
    stmt_list() <EOF>
}

void stmt_list() :
{}
{
   stmt() stmt_list()
|  <NEWLINE> stmt_list()
|  end_stmt_list()
}

void end_stmt_list() :
{}
{}

//funcdef: 'def' NAME parameters ':' suite
void funcdef() : {}
{ <DEF> AnyName() parameters() <COLON> suite() }
 
//parameters: '(' [varargslist] ')'
void parameters() : {}
{ <LPAREN> [varargslist()] <RPAREN> }

//varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' ('**'|'*' '*') NAME] | ('**'|'*' '*') NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
void varargslist() : {}
{
    defaultarg() (LOOKAHEAD(2) <COMMA> defaultarg())*
        [LOOKAHEAD(3) <COMMA> ExtraArgList()]
        [LOOKAHEAD(2) <COMMA> ExtraKeywordList()]
        [<COMMA>]
|   ( LOOKAHEAD(2) ExtraArgList() [<COMMA> ExtraKeywordList()]
    | ExtraKeywordList()
    )
}

void ExtraArgList() : {}
{ <MULTIPLY> Name() }

void ExtraKeywordList() : {}
{ (<POWER>|<MULTIPLY> <MULTIPLY>) Name() }

void defaultarg() : {}
{ fpdef() [<EQUAL> test()] }

//fpdef: NAME | '(' fplist ')'
void fpdef() : {}
{ Name() | <LPAREN> fplist() <RPAREN> }

//fplist: fpdef (',' fpdef)* [',']
void fplist() : {}
{ fpdef() (LOOKAHEAD(2) <COMMA> fpdef())* [<COMMA>] }

//stmt: simple_stmt | compound_stmt
void stmt() : {}
{ simple_stmt() | compound_stmt() }

//simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
void simple_stmt() : {}
{ small_stmt() (LOOKAHEAD(2) <SEMICOLON> small_stmt())* [<SEMICOLON>] <NEWLINE> }

//small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt
void small_stmt() : {}
{
    expr_stmt()
|   print_stmt()
|   del_stmt()
|   pass_stmt()
|   flow_stmt()
|   import_stmt()
|   global_stmt()
|   exec_stmt()
|   assert_stmt()
}

//expr_stmt: testlist (augassign testlist | ('=' testlist)*)
void expr_stmt() : {}
{
    SmartTestList() (
    <PLUSEQ> SmartTestList()
|   <MINUSEQ> SmartTestList()
|   <MULTIPLYEQ> SmartTestList()
|   <DIVIDEEQ> SmartTestList()
|   <FLOORDIVIDEEQ> SmartTestList()
|   <MODULOEQ> SmartTestList()
|   <ANDEQ> SmartTestList()
|   <OREQ> SmartTestList()
|   <XOREQ> SmartTestList()
|   <LSHIFTEQ> SmartTestList()
|   <RSHIFTEQ> SmartTestList()
|   <POWEREQ> SmartTestList()
|   (<EQUAL> SmartTestList())*
    )
}

//print_stmt: 'print' (test ',')* [test] | 'print' '>>' test (, test)+ [,]
void print_stmt() : {}
{
    LOOKAHEAD(2) <PRINT> <RSHIFT> test() [ (LOOKAHEAD(2) <COMMA> test())+ [Comma()] ]
|   LOOKAHEAD(2) <PRINT> test() (LOOKAHEAD(2) <COMMA> test())* [Comma()]
|   <PRINT>
}

//del_stmt: 'del' exprlist
void del_stmt() : {}
{ <DEL> exprlist() }

//pass_stmt: 'pass'
void pass_stmt(): {}
{ <PASS> }

//flow_stmt: break_stmt | continue_stmt | return_stmt | yield_stmt | raise_stmt
void flow_stmt() : {}
{
    <BREAK>
|   <CONTINUE>
|   return_stmt()
|   yield_stmt()
|   raise_stmt()
}

//return_stmt: 'return' [testlist]
void return_stmt() : {}
{ <RETURN> [SmartTestList()] }

//yield_stmt: 'yield' [testlist]
void yield_stmt() : {}
{ <YIELD> SmartTestList() }

//raise_stmt: 'raise' [test [',' test [',' test]]]
void raise_stmt() : {}
{ <RAISE> [test() [<COMMA> test() [<COMMA> test()]]] }

//import_stmt: 'import' dotted_name (',' dotted_name)* | 'from' dotted_name 'import' ('*' | NAME (',' NAME)*)
void import_stmt() : {}
{ <IMPORT> Import() | <FROM> ImportFrom() }

void Import() : {}
{ dotted_as_name() (<COMMA> dotted_as_name())* }

void ImportFrom() : {}
{
    dotted_name() <IMPORT> 
    ( <MULTIPLY> | import_as_name() (<COMMA> import_as_name())* )
}

//dotted_as_name: dotted_name [NAME NAME]
void dotted_as_name() : {}
{ dotted_name() [<AS> Name()] }

//dotted_name: NAME ('.' NAME)*
void dotted_name() : {}
{ AnyName() (<DOT> AnyName() )* }

//import_as_name: NAME [NAME NAME]
void import_as_name() : {}
{ AnyName() [<AS> Name()] }

//global_stmt: 'global' NAME (',' NAME)*
void global_stmt(): {}
{ <GLOBAL> Name() (<COMMA> Name())* }

//exec_stmt: 'exec' expr ['in' test [',' test]]
void exec_stmt(): {}
{ <EXEC> expr() [<IN> test() [<COMMA> test()]] }

//assert_stmt: 'assert' test [',' test]
void assert_stmt(): {}
{ <ASSERT> test() [<COMMA> test()] }

//compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | funcdef | classdef
void compound_stmt() : {}
{ if_stmt() | while_stmt() | for_stmt() | try_stmt()  | funcdef() | classdef() }

//if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
void if_stmt(): {}
{
    <IF> test() <COLON> suite()
         (<ELIF> test() <COLON> suite())* [ <ELSE> <COLON> suite()]
}

//while_stmt: 'while' test ':' suite ['else' ':' suite]
void while_stmt(): {}
{ <WHILE> test() <COLON> suite() [<ELSE> <COLON> suite()] }

//for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
void for_stmt(): {}
{ <FOR> exprlist() <IN> SmartTestList() <COLON> suite()
       [<ELSE> <COLON> suite()]
}

//try_stmt: ('try' ':' suite (except_clause ':' suite)+ #diagram:break
//           ['else' ':' suite] | 'try' ':' suite 'finally' ':' suite)
void try_stmt() : {}
{ <TRY> <COLON> suite() 
    (
      (except_clause())+ [<ELSE> <COLON> suite()]
      | <FINALLY> <COLON> suite()
    )
}

//except_clause: 'except' [test [',' test]]
void except_clause(): {}
{ <EXCEPT> [test() [<COMMA> test()]] <COLON> suite() }

//suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
void suite(): {}
{ simple_stmt() 
  |  <NEWLINE> <INDENT> (stmt())+ <DEDENT>
}

//test: and_test ('or' and_test)* | lambdef
void test() : {}
{
    lambdef() 
  | and_test() (<OR_BOOL> and_test())*
}

//and_test: not_test ('and' not_test)*
void and_test() : {}
{ not_test() (<AND_BOOL> not_test())* }

//not_test: 'not' not_test | comparison
void not_test() : {}
{ <NOT_BOOL> not_test() | comparison() }

//comparison: expr (comp_op expr)*
void comparison() : {}
{ expr() (comp_op() expr())* }

//comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
void comp_op() : {}
{
    <LESS>
|   <GREATER>
|   <EQEQUAL>
|   <EQGREATER>
|   <EQLESS>
|   <LESSGREATER>
|   <NOTEQUAL>
|   <IN>
|   <NOT_BOOL> <IN>
|   LOOKAHEAD(2) <IS> <NOT_BOOL>
|   <IS>
}

//expr: xor_expr ('|' xor_expr)*
void expr() : {}
{ xor_expr() (<OR> xor_expr())* }

//xor_expr: and_expr ('^' and_expr)*
void xor_expr() : {}
{ and_expr() (<XOR> and_expr())* }

//and_expr: shift_expr ('&' shift_expr)*
void and_expr() : {}
{ shift_expr() (<AND> shift_expr())* }

//shift_expr: arith_expr (('<<'|'>>') arith_expr)*
void shift_expr() : {}
{
    arith_expr() 
    (
      <LSHIFT> arith_expr()
    | <RSHIFT> arith_expr()
    )*
}

//arith_expr: term (('+'|'-') term)*
void arith_expr() : {}
{
    term() 
    (
      <PLUS> term()
    | <MINUS> term()
    )*
}

//term: factor (('*'|'/'|'%') factor)*
void term() : {}
{
    factor()  
    (
      <MULTIPLY> factor()
    | <DIVIDE> factor()
    | <FLOORDIVIDE> factor()
    | <MODULO> factor()
    )*
}

//factor: ('+'|'-'|'~') factor | power
void factor() : {}
{
    <PLUS> factor()
|   <MINUS> factor()
|   <NOT> factor()
|   power()
} /*Modified, no recursion*/

//power: atom trailer* ('**' factor)*
void power() : {}
{ atomtrailer() (LOOKAHEAD(2) <POWER> factor())* }

//trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
void atomtrailer() : {}
{
    atom() 
(   LOOKAHEAD(2) <LPAREN> <RPAREN>
|   <LPAREN> arglist() <RPAREN>
|   <LBRACKET> subscriptlist() <RBRACKET>
|   <DOT> AnyName()
)*
}

//atom: '(' [testlist] ')' | '[' [testlist] ']' | '{' [dictmaker] '}' | '`' testlist '`' | NAME | NUMBER | STRING+
void atom() : {}
{
    LOOKAHEAD(2) <LPAREN> <RPAREN>
|   <LPAREN> [SmartTestList()] <RPAREN>
|   <LBRACKET> [listmaker()] <RBRACKET>
|   <LBRACE> [dictmaker()] <RBRACE>
|   "`" SmartTestList() "`"
|   Name()
|   PythonNumber()
|   PythonString() (PythonString())*
}

//lambdef: 'lambda' [varargslist] ':' test
void lambdef() : {}
{ <LAMBDA> [varargslist()] <COLON> test() }

//subscriptlist: subscript (',' subscript)* [',']
void subscriptlist() : {}
{ subscript() (LOOKAHEAD(2) <COMMA> subscript())* [Comma()] }

//subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
void subscript() : {}
{
    <DOT> <DOT> <DOT>
|   test() (slice())?
|   slice()
}

//sliceop: ':' [test]
void slice() : {}
{ Colon() [test()] (Colon() [test()])? }

void Colon() : {} {<COLON>}
void Comma() : {} {<COMMA>}

//exprlist: expr (',' expr)* [',']
void exprlist() : {}
{ expr() (LOOKAHEAD(2) <COMMA> expr())* [Comma()] }

//testlist: test (',' test)* [',']
void SmartTestList() : {}
{ test() (LOOKAHEAD(2) <COMMA> test())* [Comma()] }

//testlist: test (',' test)* [',']
void testlist() : {}
{ test() (LOOKAHEAD(2) <COMMA> test())* [<COMMA>]}

//dictmaker: test ':' test (',' test ':' test)* [',']
void dictmaker() : {}
{test() <COLON> test() (LOOKAHEAD(2) <COMMA> test() <COLON> test())* [<COMMA>]}

//listmaker: test ( list_for | (',' test)* [','] )
void listmaker() : {}
{ test() ( (list_for())+ | (LOOKAHEAD(2) <COMMA> test())* [Comma()] ) }

//list_iter: [list_for | list_if]
//void list_iter() : {}
//{ [ (list_for() | list_if()) ] }

//list_for: 'for' exprlist 'in' testlist list_iter
void list_for(): {}
{ <FOR> exprlist() <IN> SmartTestList() (list_if())* }

//list_if: 'if' test list_iter
void list_if() : {}
{ <IF> test() }

//classdef: 'class' NAME ['(' testlist ')'] ':' suite
void classdef(): {}
{<CLASS> Name() [<LPAREN> testlist() <RPAREN>] <COLON> suite()}

//arglist: (argument ',')*
//              (argument [',']| '*' test [',' '**' test] | '**' test)
void arglist() : {}
{
    normalargs() [<COMMA>
    [LOOKAHEAD(2) ExtraArgValueList()
    [ <COMMA> ExtraKeywordValueList() ] | ExtraKeywordValueList()]]
|   [LOOKAHEAD(2) ExtraArgValueList()
    [ <COMMA> ExtraKeywordValueList() ] | ExtraKeywordValueList()]
}

void normalargs() : {}
{ argument() (LOOKAHEAD(2) <COMMA> argument())* }

void ExtraArgValueList() : {}
{ <MULTIPLY> test() }

void ExtraKeywordValueList() : {}
{ (<POWER>|<MULTIPLY> <MULTIPLY>) test() }

//argument: [test '='] test     # Really [keyword '='] test
void argument() : {}
{ [LOOKAHEAD(2) AnyName() <EQUAL>] test() }

void PythonNumber() :
{}
{
  <HEXNUMBER>
| <OCTNUMBER>
| <DECNUMBER>
| <FLOAT>
| <COMPLEX>
}

void Complex(): {} { <FLOAT> }

void Name() :
{}
{
    <NAME>
|   <AS>
}

void PythonString() :
{}
{
    <SINGLE_STRING>
|   <SINGLE_STRING2>
|   <TRIPLE_STRING>
|   <TRIPLE_STRING2>
|   <SINGLE_USTRING>
|   <SINGLE_USTRING2>
|   <TRIPLE_USTRING>
|   <TRIPLE_USTRING2>
}

void AnyName() :
{}
{
    <NAME>
|   <OR_BOOL>
|   <AND_BOOL>
|   <NOT_BOOL>
|   <IS>
|   <IN>
|   <LAMBDA>
|   <IF>
|   <ELSE>
|   <ELIF>
|   <WHILE>
|   <FOR>
|   <TRY>
|   <EXCEPT>
|   <DEF>
|   <CLASS>
|   <FINALLY>
|   <PRINT>
|   <PASS>
|   <BREAK>
|   <CONTINUE>
|   <RETURN>
|   <YIELD>
|   <IMPORT>
|   <FROM>
|   <DEL>
|   <RAISE>
|   <GLOBAL>
|   <EXEC>
|   <ASSERT>
|   <AS>
}
