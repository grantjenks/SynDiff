//
// Generated by JTB 1.3.3
//

options {
   STATIC = false;
   COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(PythonParser)
package lang.python;

import lang.python.syntaxtree.*;
import lang.syntaxtree.*;
import java.util.Vector;


public class PythonParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(PythonParser)

TOKEN_MGR_DECLS:{
   int indentation[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
   int level = 0;
   int dedents = 0;
   int parens = 0;
   int indent;
   boolean expect_indent = false;
   boolean compound = false;
   public boolean single_input = false;
   public boolean partial = false;
   public boolean stdprompt = false;
   public boolean generator_allowed = true;
   static Token addDedent(Token previous)
   {
      Token t = new Token();
      t.kind = DEDENT;
      t.beginLine = previous.beginLine;
      t.endLine = previous.endLine;
      t.beginColumn = previous.beginColumn;
      t.endColumn = previous.endColumn;
      t.image = "<DEDENT>";
      t.specialToken = null;
      t.next = null;
      previous.next = t;
      return t;
   }
   void CommonTokenAction(Token t)
   {
      if ( t.kind == 1 )
      {
         if ( !partial || curLexState == MAYBE_FORCE_NEWLINE_IF_EOF )
         {
            if ( curLexState == DEFAULT )
            {
               t.kind = NEWLINE;
            }
            else
            {
               t.kind = DEDENT;
               if ( level >= 0 )
                  level -= 1;
            }
            while ( level >= 0 )
            {
               level--;
               t = addDedent(t);
            }
            if ( !single_input )
            {
               t.kind = 1;
               t.image = "<EOF>";
            }
            else
            {
               t.kind = NEWLINE;
               t.image = "<FORCENL>";
               single_input = false;
            }
         }
      }
      else
         if ( t.kind == YIELD )
         {
            if ( !generator_allowed )
            {
               t.kind = NAME;
            }
         }
   }
   void indenting(int ind)
   {
      indent = ind;
      if ( indent == indentation[level] )
         SwitchTo(INDENTATION_UNCHANGED);
      else
         SwitchTo(INDENTING);
   }
}


SKIP :
{
   <SPACE: " ">
   | "\t"
   | "\014"
   | <CONTINUATION: ("\\") ("\r\n" | "\n" | "\r")>
   | <NEWLINE1: ("\r\n" | "\n" | "\r")>
      {
         if ( parens == 0 )
         {
            indent = 0;
            input_stream.backup(1);
            if ( level == 0 )
               SwitchTo(FORCE_NEWLINE1);
            else
               SwitchTo(FORCE_NEWLINE2);
         }
      }
}

<FORCE_NEWLINE1> TOKEN :
{
   <NEWLINE: ("\n" | "\r")> : INDENTATION_UNCHANGED
}

<FORCE_NEWLINE2> TOKEN :
{
   <NEWLINE2: ("\n" | "\r")>
      {
         matchedToken.kind = NEWLINE;
      } : INDENTING
}

<MAYBE_FORCE_NEWLINE_IF_EOF> SKIP :
{
   <"">
      {
         indenting(0);
      }
}

<INDENTING, INDENTATION_UNCHANGED> SKIP :
{
   "\t"
      {
         indenting((indent / 8 + 1) * 8);
      }
   | " "
      {
         indenting(indent + 1);
      }
   | "\014"
      {
         indenting(0);
      }
   | <CRLF1: ("\r\n" | "\n" | "\r")>
      {
         if ( partial && single_input&& indent == 0&& parens == 0&& (stdprompt || !expect_indent) )
         {
            SwitchTo(MAYBE_FORCE_NEWLINE_IF_EOF);
         }
         else
            indenting(0);
      }
}

<INDENTATION_UNCHANGED> SKIP :
{
   <""> : DEFAULT
}

<INDENTING> TOKEN :
{
   <DEDENT: "">
      {
         if ( indent > indentation[level] )
         {
            level++;
            indentation[level] = indent;
            matchedToken.kind = INDENT;
            matchedToken.image = "<INDENT>";
         }
         else
            if ( level > 0 )
            {
               Token t = matchedToken;
               level -= 1;
               while ( level > 0 && indent < indentation[level] )
               {
                  level--;
                  t = addDedent(t);
               }
               if ( indent != indentation[level] )
               {
                  throw new TokenMgrError("inconsistent dedent",0);
               }
               t.next = null;
            }
      } : DEFAULT
}

<UNREACHABLE> TOKEN :
{
   <INDENT: "<INDENT>">
}

<DEFAULT> SPECIAL_TOKEN :
{
   <TRAILING_COMMENT: "#" (~["\n", "\r"])*>
}

<INDENTING, INDENTATION_UNCHANGED> SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "#" (~["\n", "\r"])* ("\r\n" | "\n" | "\r")>
      {
         indenting(0);
      }
}

TOKEN :
{
   <LPAREN: "(">
      {
         parens++;
      }
   | <RPAREN: ")">
      {
         parens--;
      }
   | <LBRACE: "{">
      {
         parens++;
      }
   | <RBRACE: "}">
      {
         parens--;
      }
   | <LBRACKET: "[">
      {
         parens++;
      }
   | <RBRACKET: "]">
      {
         parens--;
      }
   | <SEMICOLON: ";">
   | <COMMA: ",">
   | <DOT: ".">
   | <COLON: ":">
}

TOKEN :
{
   <PLUS: "+">
   | <MINUS: "-">
   | <MULTIPLY: "*">
   | <DIVIDE: "/">
   | <FLOORDIVIDE: "//">
   | <POWER: "**">
   | <LSHIFT: "<<">
   | <RSHIFT: ">>">
   | <MODULO: "%">
   | <NOT: "~">
   | <XOR: "^">
   | <OR: "|">
   | <AND: "&">
   | <EQUAL: "=">
   | <GREATER: ">">
   | <LESS: "<">
   | <EQEQUAL: "==">
   | <EQLESS: "<=">
   | <EQGREATER: ">=">
   | <LESSGREATER: "<>">
   | <NOTEQUAL: "!=">
   | <PLUSEQ: "+=">
   | <MINUSEQ: "-=">
   | <MULTIPLYEQ: "*=">
   | <DIVIDEEQ: "/=">
   | <FLOORDIVIDEEQ: "//=">
   | <MODULOEQ: "%=">
   | <ANDEQ: "&=">
   | <OREQ: "|=">
   | <XOREQ: "^=">
   | <LSHIFTEQ: "<<=">
   | <RSHIFTEQ: ">>=">
   | <POWEREQ: "**=">
}

TOKEN :
{
   <OR_BOOL: "or">
   | <AND_BOOL: "and">
   | <NOT_BOOL: "not">
   | <IS: "is">
   | <IN: "in">
   | <LAMBDA: "lambda">
   | <IF: "if">
   | <ELSE: "else">
   | <ELIF: "elif">
   | <WHILE: "while">
   | <FOR: "for">
   | <TRY: "try">
   | <EXCEPT: "except">
   | <DEF: "def">
   | <CLASS: "class">
   | <FINALLY: "finally">
   | <PRINT: "print">
   | <PASS: "pass">
   | <BREAK: "break">
   | <CONTINUE: "continue">
   | <RETURN: "return">
   | <YIELD: "yield">
   | <IMPORT: "import">
   | <FROM: "from">
   | <DEL: "del">
   | <RAISE: "raise">
   | <GLOBAL: "global">
   | <EXEC: "exec">
   | <ASSERT: "assert">
   | <AS: "as">
}

TOKEN :
{
   <NAME: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["_", "a"-"z", "A"-"Z"]>
}

TOKEN :
{
   <DECNUMBER: ["1"-"9"] (["0"-"9"])* (["l", "L"])? | "0">
   | <HEXNUMBER: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+ (["l", "L"])?>
   | <OCTNUMBER: "0" (["0"-"7"])* (["l", "L"])?>
   | <FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? | "." (["0"-"9"])+ (<EXPONENT>)? | (["0"-"9"])+ <EXPONENT>>
   | <COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER>) ["j", "J"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <#DIGIT: ["0"-"9"]>
}

MORE :
{
   <(["u", "U"]) (["r", "R"])? "'"> : IN_USTRING11
   | <(["u", "U"]) (["r", "R"])? "\""> : IN_USTRING21
   | <(["u", "U"]) (["r", "R"])? "'''"> : IN_USTRING13
   | <(["u", "U"]) (["r", "R"])? "\"\"\""> : IN_USTRING23
   | <(["r", "R"])? "'"> : IN_STRING11
   | <(["r", "R"])? "\""> : IN_STRING21
   | <(["r", "R"])? "'''"> : IN_STRING13
   | <(["r", "R"])? "\"\"\""> : IN_STRING23
}

<IN_STRING11> TOKEN :
{
   <SINGLE_STRING: "'">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_STRING21> TOKEN :
{
   <SINGLE_STRING2: "\"">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_STRING13> TOKEN :
{
   <TRIPLE_STRING: "'''">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_STRING23> TOKEN :
{
   <TRIPLE_STRING2: "\"\"\"">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_USTRING11> TOKEN :
{
   <SINGLE_USTRING: "'">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_USTRING21> TOKEN :
{
   <SINGLE_USTRING2: "\"">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_USTRING13> TOKEN :
{
   <TRIPLE_USTRING: "'''">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_USTRING23> TOKEN :
{
   <TRIPLE_USTRING2: "\"\"\"">
      {
         matchedToken.image = image.toString();
      } : DEFAULT
}

<IN_STRING11> MORE :
{
   <"\\\r\n">
      {
         image.setLength(image.length() - 3);
      } : IN_STRING1NLC
   | <("\\" ("\n" | "\r"))>
      {
         image.setLength(image.length() - 2);
      } : IN_STRING1NLC
}

<IN_STRING21> MORE :
{
   <"\\\r\n">
      {
         image.setLength(image.length() - 3);
      } : IN_STRING2NLC
   | <("\\" ("\n" | "\r"))>
      {
         image.setLength(image.length() - 2);
      } : IN_STRING2NLC
}

<IN_USTRING11> MORE :
{
   <"\\\r\n">
      {
         image.setLength(image.length() - 3);
      } : IN_USTRING1NLC
   | <("\\" ("\n" | "\r"))>
      {
         image.setLength(image.length() - 2);
      } : IN_USTRING1NLC
}

<IN_USTRING21> MORE :
{
   <"\\\r\n">
      {
         image.setLength(image.length() - 3);
      } : IN_USTRING2NLC
   | <("\\" ("\n" | "\r"))>
      {
         image.setLength(image.length() - 2);
      } : IN_USTRING2NLC
}

<IN_STRING1NLC> MORE :
{
   <""> : IN_STRING11
}

<IN_STRING2NLC> MORE :
{
   <""> : IN_STRING21
}

<IN_USTRING1NLC> MORE :
{
   <""> : IN_USTRING11
}

<IN_USTRING2NLC> MORE :
{
   <""> : IN_USTRING21
}

<IN_STRING11, IN_USTRING11> MORE :
{
   <("\\" ("\\" | "'")) | ~["\n", "\r"]>
}

<IN_STRING21, IN_USTRING21> MORE :
{
   <("\\" ("\\" | "\"")) | ~["\n", "\r"]>
}

<IN_STRING13, IN_STRING23, IN_USTRING13, IN_USTRING23> MORE :
{
   <"\r\n">
      {
         int l = image.length();
         image.setLength(l - 1);
         image.setCharAt(l - 2,'\n');
      }
   | <"\n">
   | <"\r">
      {
         image.setCharAt(image.length() - 1,'\n');
      }
   | <~["\n", "\r"]>
   | <"\\" ~["\n", "\r"]>
}

file_input file_input() :
{
   stmt_list n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=stmt_list()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new file_input(n0,n1); }
}

stmt_list stmt_list() :
{
   NodeChoice n0;
   NodeSequence n1;
   stmt n2;
   stmt_list n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   stmt_list n7;
   end_stmt_list n8;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=stmt()
      { n1.addNode(n2); }
      n3=stmt_list()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n4 = new NodeSequence(2); }
      n6=<NEWLINE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=stmt_list()
      { n4.addNode(n7); }
      { n0 = new NodeChoice(n4, 1); }
   |
      n8=end_stmt_list()
      { n0 = new NodeChoice(n8, 2); }
   )
   
   { return new stmt_list(n0); }
}

end_stmt_list end_stmt_list() :
{

   
}
{
   
   { return new end_stmt_list(); }
}

funcdef funcdef() :
{
   NodeToken n0;
   Token n1;
   AnyName n2;
   parameters n3;
   NodeToken n4;
   Token n5;
   suite n6;

   
}
{
   n1=<DEF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AnyName()
   n3=parameters()
   n5=<COLON> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=suite()
   
   { return new funcdef(n0,n2,n3,n4,n6); }
}

parameters parameters() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   varargslist n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<LPAREN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=varargslist()
      { n2.addNode(n3); }
   )?
   n5=<RPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new parameters(n0,n2,n4); }
}

varargslist varargslist() :
{
   NodeChoice n0;
   NodeSequence n1;
   defaultarg n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   defaultarg n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   ExtraArgList n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ExtraKeywordList n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   NodeSequence n22;
   ExtraArgList n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   ExtraKeywordList n28;
   ExtraKeywordList n29;

   
}
{
   (
      { n1 = new NodeSequence(5); }
      n2=defaultarg()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(2)
         { n4 = new NodeSequence(2); }
         n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=defaultarg()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      (
         LOOKAHEAD(3)
         { n9 = new NodeSequence(2); }
         n11=<COMMA> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n12=ExtraArgList()
         { n9.addNode(n12); }
         { n8.addNode(n9); }
      )?
      { n1.addNode(n8); }
      (
         LOOKAHEAD(2)
         { n14 = new NodeSequence(2); }
         n16=<COMMA> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=ExtraKeywordList()
         { n14.addNode(n17); }
         { n13.addNode(n14); }
      )?
      { n1.addNode(n13); }
      (
         n20=<COMMA> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n1.addNode(n18); }
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         (
            LOOKAHEAD(2)
            { n22 = new NodeSequence(3); }
            n23=ExtraArgList()
            { n22.addNode(n23); }
            (
               { n25 = new NodeSequence(2); }
               n27=<COMMA> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n25.addNode(n26); }
               n28=ExtraKeywordList()
               { n25.addNode(n28); }
               { n24.addNode(n25); }
            )?
            { n22.addNode(n24); }
            { n21 = new NodeChoice(n22, 0); }
         |
            n29=ExtraKeywordList()
            { n21 = new NodeChoice(n29, 1); }
         )
         
      )
      { n0 = new NodeChoice(n21, 1); }
   )
   
   { return new varargslist(n0); }
}

ExtraArgList ExtraArgList() :
{
   NodeToken n0;
   Token n1;
   Name n2;

   
}
{
   n1=<MULTIPLY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   
   { return new ExtraArgList(n0,n2); }
}

ExtraKeywordList ExtraKeywordList() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Name n8;

   
}
{
   (
      (
         n2=<POWER> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(2); }
         n5=<MULTIPLY> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<MULTIPLY> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n8=Name()
   
   { return new ExtraKeywordList(n0,n8); }
}

defaultarg defaultarg() :
{
   fpdef n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   test n5;

   
}
{
   n0=fpdef()
   (
      { n2 = new NodeSequence(2); }
      n4=<EQUAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=test()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new defaultarg(n0,n1); }
}

fpdef fpdef() :
{
   NodeChoice n0;
   Name n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   fplist n5;
   NodeToken n6;
   Token n7;

   
}
{
   (
      n1=Name()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4=<LPAREN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=fplist()
      { n2.addNode(n5); }
      n7=<RPAREN> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new fpdef(n0); }
}

fplist fplist() :
{
   fpdef n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   fpdef n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;

   
}
{
   n0=fpdef()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=fpdef()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n8=<COMMA> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   
   { return new fplist(n0,n1,n6); }
}

stmt stmt() :
{
   NodeChoice n0;
   simple_stmt n1;
   compound_stmt n2;

   
}
{
   (
      n1=simple_stmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=compound_stmt()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new stmt(n0); }
}

simple_stmt simple_stmt() :
{
   small_stmt n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   small_stmt n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=small_stmt()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<SEMICOLON> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=small_stmt()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n8=<SEMICOLON> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   n10=<NEWLINE> { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new simple_stmt(n0,n1,n6,n9); }
}

small_stmt small_stmt() :
{
   NodeChoice n0;
   expr_stmt n1;
   print_stmt n2;
   del_stmt n3;
   pass_stmt n4;
   flow_stmt n5;
   import_stmt n6;
   global_stmt n7;
   exec_stmt n8;
   assert_stmt n9;

   
}
{
   (
      n1=expr_stmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=print_stmt()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=del_stmt()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=pass_stmt()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=flow_stmt()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=import_stmt()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=global_stmt()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=exec_stmt()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=assert_stmt()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new small_stmt(n0); }
}

expr_stmt expr_stmt() :
{
   SmartTestList n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SmartTestList n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SmartTestList n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   SmartTestList n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SmartTestList n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   SmartTestList n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   SmartTestList n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   SmartTestList n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   SmartTestList n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   SmartTestList n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   SmartTestList n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   SmartTestList n45;
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   SmartTestList n49;
   NodeListOptional n50 = new NodeListOptional();
   NodeSequence n51;
   NodeToken n52;
   Token n53;
   SmartTestList n54;

   
}
{
   n0=SmartTestList()
   (
      (
         { n2 = new NodeSequence(2); }
         n4=<PLUSEQ> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=SmartTestList()
         { n2.addNode(n5); }
         { n1 = new NodeChoice(n2, 0); }
      |
         { n6 = new NodeSequence(2); }
         n8=<MINUSEQ> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=SmartTestList()
         { n6.addNode(n9); }
         { n1 = new NodeChoice(n6, 1); }
      |
         { n10 = new NodeSequence(2); }
         n12=<MULTIPLYEQ> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=SmartTestList()
         { n10.addNode(n13); }
         { n1 = new NodeChoice(n10, 2); }
      |
         { n14 = new NodeSequence(2); }
         n16=<DIVIDEEQ> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=SmartTestList()
         { n14.addNode(n17); }
         { n1 = new NodeChoice(n14, 3); }
      |
         { n18 = new NodeSequence(2); }
         n20=<FLOORDIVIDEEQ> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n21=SmartTestList()
         { n18.addNode(n21); }
         { n1 = new NodeChoice(n18, 4); }
      |
         { n22 = new NodeSequence(2); }
         n24=<MODULOEQ> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         n25=SmartTestList()
         { n22.addNode(n25); }
         { n1 = new NodeChoice(n22, 5); }
      |
         { n26 = new NodeSequence(2); }
         n28=<ANDEQ> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
         n29=SmartTestList()
         { n26.addNode(n29); }
         { n1 = new NodeChoice(n26, 6); }
      |
         { n30 = new NodeSequence(2); }
         n32=<OREQ> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n30.addNode(n31); }
         n33=SmartTestList()
         { n30.addNode(n33); }
         { n1 = new NodeChoice(n30, 7); }
      |
         { n34 = new NodeSequence(2); }
         n36=<XOREQ> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n34.addNode(n35); }
         n37=SmartTestList()
         { n34.addNode(n37); }
         { n1 = new NodeChoice(n34, 8); }
      |
         { n38 = new NodeSequence(2); }
         n40=<LSHIFTEQ> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
         n41=SmartTestList()
         { n38.addNode(n41); }
         { n1 = new NodeChoice(n38, 9); }
      |
         { n42 = new NodeSequence(2); }
         n44=<RSHIFTEQ> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
         n45=SmartTestList()
         { n42.addNode(n45); }
         { n1 = new NodeChoice(n42, 10); }
      |
         { n46 = new NodeSequence(2); }
         n48=<POWEREQ> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
         n49=SmartTestList()
         { n46.addNode(n49); }
         { n1 = new NodeChoice(n46, 11); }
      |
         (
            { n51 = new NodeSequence(2); }
            n53=<EQUAL> { n52 = JTBToolkit.makeNodeToken(n53); }
            { n51.addNode(n52); }
            n54=SmartTestList()
            { n51.addNode(n54); }
            { n50.addNode(n51); }
         )*
         { n50.nodes.trimToSize(); }
         { n1 = new NodeChoice(n50, 12); }
      )
      
   )
   
   { return new expr_stmt(n0,n1); }
}

print_stmt print_stmt() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   test n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   NodeList n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   test n13;
   NodeOptional n14;
   Comma n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   test n19;
   NodeListOptional n20 = new NodeListOptional();
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   test n24;
   NodeOptional n25 = new NodeOptional();
   Comma n26;
   NodeToken n27;
   Token n28;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(5); }
      n3=<PRINT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<RSHIFT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n6=test()
      { n1.addNode(n6); }
      (
         { n9 = new NodeList(); }
         { n14 = new NodeOptional(); }
         { n8 = new NodeSequence(2); }
         (
            LOOKAHEAD(2)
            { n10 = new NodeSequence(2); }
            n12=<COMMA> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
            n13=test()
            { n10.addNode(n13); }
            { n9.addNode(n10); }
         )+
         { n9.nodes.trimToSize(); }
         { n8.addNode(n9); }
         (
            n15=Comma()
            { n14.addNode(n15); }
         )?
         { n8.addNode(n14); }
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      { n16 = new NodeSequence(5); }
      n18=<PRINT> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n19=test()
      { n16.addNode(n19); }
      (
         LOOKAHEAD(2)
         { n21 = new NodeSequence(2); }
         n23=<COMMA> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n24=test()
         { n21.addNode(n24); }
         { n20.addNode(n21); }
      )*
      { n20.nodes.trimToSize(); }
      { n16.addNode(n20); }
      (
         n26=Comma()
         { n25.addNode(n26); }
      )?
      { n16.addNode(n25); }
      { n0 = new NodeChoice(n16, 1); }
   |
      n28=<PRINT> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 2); }
   )
   
   { return new print_stmt(n0); }
}

del_stmt del_stmt() :
{
   NodeToken n0;
   Token n1;
   exprlist n2;

   
}
{
   n1=<DEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=exprlist()
   
   { return new del_stmt(n0,n2); }
}

pass_stmt pass_stmt() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<PASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new pass_stmt(n0); }
}

flow_stmt flow_stmt() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   return_stmt n5;
   yield_stmt n6;
   raise_stmt n7;

   
}
{
   (
      n2=<BREAK> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CONTINUE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n5=return_stmt()
      { n0 = new NodeChoice(n5, 2); }
   |
      n6=yield_stmt()
      { n0 = new NodeChoice(n6, 3); }
   |
      n7=raise_stmt()
      { n0 = new NodeChoice(n7, 4); }
   )
   
   { return new flow_stmt(n0); }
}

return_stmt return_stmt() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   SmartTestList n3;

   
}
{
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=SmartTestList()
      { n2.addNode(n3); }
   )?
   
   { return new return_stmt(n0,n2); }
}

yield_stmt yield_stmt() :
{
   NodeToken n0;
   Token n1;
   SmartTestList n2;

   
}
{
   n1=<YIELD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SmartTestList()
   
   { return new yield_stmt(n0,n2); }
}

raise_stmt raise_stmt() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   test n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   test n9;
   NodeOptional n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   test n14;

   
}
{
   n1=<RAISE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=test()
      { n3.addNode(n4); }
      (
         { n10 = new NodeOptional(); }
         { n6 = new NodeSequence(3); }
         n8=<COMMA> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=test()
         { n6.addNode(n9); }
         (
            { n11 = new NodeSequence(2); }
            n13=<COMMA> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            n14=test()
            { n11.addNode(n14); }
            { n10.addNode(n11); }
         )?
         { n6.addNode(n10); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   
   { return new raise_stmt(n0,n2); }
}

import_stmt import_stmt() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Import n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   ImportFrom n8;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3=<IMPORT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Import()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n7=<FROM> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=ImportFrom()
      { n5.addNode(n8); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new import_stmt(n0); }
}

Import Import() :
{
   dotted_as_name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   dotted_as_name n5;

   
}
{
   n0=dotted_as_name()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=dotted_as_name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Import(n0,n1); }
}

ImportFrom ImportFrom() :
{
   dotted_name n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   import_as_name n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   import_as_name n12;

   
}
{
   n0=dotted_name()
   n2=<IMPORT> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         n5=<MULTIPLY> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n6 = new NodeSequence(2); }
         n7=import_as_name()
         { n6.addNode(n7); }
         (
            { n9 = new NodeSequence(2); }
            n11=<COMMA> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            n12=import_as_name()
            { n9.addNode(n12); }
            { n8.addNode(n9); }
         )*
         { n8.nodes.trimToSize(); }
         { n6.addNode(n8); }
         { n3 = new NodeChoice(n6, 1); }
      )
      
   )
   
   { return new ImportFrom(n0,n1,n3); }
}

dotted_as_name dotted_as_name() :
{
   dotted_name n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   
}
{
   n0=dotted_name()
   (
      { n2 = new NodeSequence(2); }
      n4=<AS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new dotted_as_name(n0,n1); }
}

dotted_name dotted_name() :
{
   AnyName n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AnyName n5;

   
}
{
   n0=AnyName()
   (
      { n2 = new NodeSequence(2); }
      n4=<DOT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AnyName()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new dotted_name(n0,n1); }
}

import_as_name import_as_name() :
{
   AnyName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   
}
{
   n0=AnyName()
   (
      { n2 = new NodeSequence(2); }
      n4=<AS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new import_as_name(n0,n1); }
}

global_stmt global_stmt() :
{
   NodeToken n0;
   Token n1;
   Name n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Name n7;

   
}
{
   n1=<GLOBAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   (
      { n4 = new NodeSequence(2); }
      n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Name()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new global_stmt(n0,n2,n3); }
}

exec_stmt exec_stmt() :
{
   NodeToken n0;
   Token n1;
   expr n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   test n7;
   NodeOptional n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   test n12;

   
}
{
   n1=<EXEC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=expr()
   (
      { n8 = new NodeOptional(); }
      { n4 = new NodeSequence(3); }
      n6=<IN> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=test()
      { n4.addNode(n7); }
      (
         { n9 = new NodeSequence(2); }
         n11=<COMMA> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n12=test()
         { n9.addNode(n12); }
         { n8.addNode(n9); }
      )?
      { n4.addNode(n8); }
      { n3.addNode(n4); }
   )?
   
   { return new exec_stmt(n0,n2,n3); }
}

assert_stmt assert_stmt() :
{
   NodeToken n0;
   Token n1;
   test n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   test n7;

   
}
{
   n1=<ASSERT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=test()
   (
      { n4 = new NodeSequence(2); }
      n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=test()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new assert_stmt(n0,n2,n3); }
}

compound_stmt compound_stmt() :
{
   NodeChoice n0;
   if_stmt n1;
   while_stmt n2;
   for_stmt n3;
   try_stmt n4;
   funcdef n5;
   classdef n6;

   
}
{
   (
      n1=if_stmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=while_stmt()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=for_stmt()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=try_stmt()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=funcdef()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=classdef()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new compound_stmt(n0); }
}

if_stmt if_stmt() :
{
   NodeToken n0;
   Token n1;
   test n2;
   NodeToken n3;
   Token n4;
   suite n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   test n10;
   NodeToken n11;
   Token n12;
   suite n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   suite n20;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=test()
   n4=<COLON> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=suite()
   (
      { n7 = new NodeSequence(4); }
      n9=<ELIF> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=test()
      { n7.addNode(n10); }
      n12=<COLON> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n7.addNode(n11); }
      n13=suite()
      { n7.addNode(n13); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   (
      { n15 = new NodeSequence(3); }
      n17=<ELSE> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<COLON> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      n20=suite()
      { n15.addNode(n20); }
      { n14.addNode(n15); }
   )?
   
   { return new if_stmt(n0,n2,n3,n5,n6,n14); }
}

while_stmt while_stmt() :
{
   NodeToken n0;
   Token n1;
   test n2;
   NodeToken n3;
   Token n4;
   suite n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   suite n12;

   
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=test()
   n4=<COLON> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=suite()
   (
      { n7 = new NodeSequence(3); }
      n9=<ELSE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11=<COLON> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      n12=suite()
      { n7.addNode(n12); }
      { n6.addNode(n7); }
   )?
   
   { return new while_stmt(n0,n2,n3,n5,n6); }
}

for_stmt for_stmt() :
{
   NodeToken n0;
   Token n1;
   exprlist n2;
   NodeToken n3;
   Token n4;
   SmartTestList n5;
   NodeToken n6;
   Token n7;
   suite n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   suite n15;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=exprlist()
   n4=<IN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SmartTestList()
   n7=<COLON> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=suite()
   (
      { n10 = new NodeSequence(3); }
      n12=<ELSE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n14=<COLON> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n10.addNode(n13); }
      n15=suite()
      { n10.addNode(n15); }
      { n9.addNode(n10); }
   )?
   
   { return new for_stmt(n0,n2,n3,n5,n6,n8,n9); }
}

try_stmt try_stmt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   suite n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeList n7 = new NodeList();
   except_clause n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   suite n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   suite n21;

   
}
{
   n1=<TRY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<COLON> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=suite()
   (
      (
         { n6 = new NodeSequence(2); }
         (
            n8=except_clause()
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n6.addNode(n7); }
         (
            { n10 = new NodeSequence(3); }
            n12=<ELSE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
            n14=<COLON> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n10.addNode(n13); }
            n15=suite()
            { n10.addNode(n15); }
            { n9.addNode(n10); }
         )?
         { n6.addNode(n9); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n16 = new NodeSequence(3); }
         n18=<FINALLY> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
         n20=<COLON> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n16.addNode(n19); }
         n21=suite()
         { n16.addNode(n21); }
         { n5 = new NodeChoice(n16, 1); }
      )
      
   )
   
   { return new try_stmt(n0,n2,n4,n5); }
}

except_clause except_clause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   test n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   test n9;
   NodeToken n10;
   Token n11;
   suite n12;

   
}
{
   n1=<EXCEPT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=test()
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8=<COMMA> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=test()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n11=<COLON> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=suite()
   
   { return new except_clause(n0,n2,n10,n12); }
}

suite suite() :
{
   NodeChoice n0;
   simple_stmt n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeList n7 = new NodeList();
   stmt n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n1=simple_stmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(4); }
      n4=<NEWLINE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6=<INDENT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      (
         n8=stmt()
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n2.addNode(n7); }
      n10=<DEDENT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n2.addNode(n9); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new suite(n0); }
}

test test() :
{
   NodeChoice n0;
   lambdef n1;
   NodeSequence n2;
   and_test n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   and_test n8;

   
}
{
   (
      n1=lambdef()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      n3=and_test()
      { n2.addNode(n3); }
      (
         { n5 = new NodeSequence(2); }
         n7=<OR_BOOL> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n8=and_test()
         { n5.addNode(n8); }
         { n4.addNode(n5); }
      )*
      { n4.nodes.trimToSize(); }
      { n2.addNode(n4); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new test(n0); }
}

and_test and_test() :
{
   not_test n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   not_test n5;

   
}
{
   n0=not_test()
   (
      { n2 = new NodeSequence(2); }
      n4=<AND_BOOL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=not_test()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new and_test(n0,n1); }
}

not_test not_test() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   not_test n4;
   comparison n5;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3=<NOT_BOOL> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=not_test()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n5=comparison()
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new not_test(n0); }
}

comparison comparison() :
{
   expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   comp_op n3;
   expr n4;

   
}
{
   n0=expr()
   (
      { n2 = new NodeSequence(2); }
      n3=comp_op()
      { n2.addNode(n3); }
      n4=expr()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new comparison(n0,n1); }
}

comp_op comp_op() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;

   
}
{
   (
      n2=<LESS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<GREATER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<EQEQUAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<EQGREATER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<EQLESS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<LESSGREATER> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<NOTEQUAL> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<IN> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      { n17 = new NodeSequence(2); }
      n19=<NOT_BOOL> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<IN> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      { n0 = new NodeChoice(n17, 8); }
   |
      LOOKAHEAD(2)
      { n22 = new NodeSequence(3); }
      n24=<IS> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<NOT_BOOL> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      { n0 = new NodeChoice(n22, 9); }
   |
      n28=<IS> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 10); }
   )
   
   { return new comp_op(n0); }
}

expr expr() :
{
   xor_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   xor_expr n5;

   
}
{
   n0=xor_expr()
   (
      { n2 = new NodeSequence(2); }
      n4=<OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=xor_expr()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new expr(n0,n1); }
}

xor_expr xor_expr() :
{
   and_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   and_expr n5;

   
}
{
   n0=and_expr()
   (
      { n2 = new NodeSequence(2); }
      n4=<XOR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=and_expr()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new xor_expr(n0,n1); }
}

and_expr and_expr() :
{
   shift_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   shift_expr n5;

   
}
{
   n0=shift_expr()
   (
      { n2 = new NodeSequence(2); }
      n4=<AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=shift_expr()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new and_expr(n0,n1); }
}

shift_expr shift_expr() :
{
   arith_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   arith_expr n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   arith_expr n10;

   
}
{
   n0=arith_expr()
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<LSHIFT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=arith_expr()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<RSHIFT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=arith_expr()
         { n7.addNode(n10); }
         { n2 = new NodeChoice(n7, 1); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new shift_expr(n0,n1); }
}

arith_expr arith_expr() :
{
   term n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   term n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   term n10;

   
}
{
   n0=term()
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<PLUS> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=term()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<MINUS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=term()
         { n7.addNode(n10); }
         { n2 = new NodeChoice(n7, 1); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new arith_expr(n0,n1); }
}

term term() :
{
   factor n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   factor n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   factor n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   factor n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   factor n18;

   
}
{
   n0=factor()
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<MULTIPLY> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=factor()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<DIVIDE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=factor()
         { n7.addNode(n10); }
         { n2 = new NodeChoice(n7, 1); }
      |
         { n11 = new NodeSequence(2); }
         n13=<FLOORDIVIDE> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=factor()
         { n11.addNode(n14); }
         { n2 = new NodeChoice(n11, 2); }
      |
         { n15 = new NodeSequence(2); }
         n17=<MODULO> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
         n18=factor()
         { n15.addNode(n18); }
         { n2 = new NodeChoice(n15, 3); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new term(n0,n1); }
}

factor factor() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   factor n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   factor n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   factor n12;
   power n13;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3=<PLUS> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=factor()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n7=<MINUS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=factor()
      { n5.addNode(n8); }
      { n0 = new NodeChoice(n5, 1); }
   |
      { n9 = new NodeSequence(2); }
      n11=<NOT> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=factor()
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 2); }
   |
      n13=power()
      { n0 = new NodeChoice(n13, 3); }
   )
   
   { return new factor(n0); }
}

power power() :
{
   atomtrailer n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   factor n5;

   
}
{
   n0=atomtrailer()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<POWER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=factor()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new power(n0,n1); }
}

atomtrailer atomtrailer() :
{
   atom n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   arglist n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   subscriptlist n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   AnyName n23;

   
}
{
   n0=atom()
   (
      (
         LOOKAHEAD(2)
         { n3 = new NodeSequence(3); }
         n5=<LPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<RPAREN> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n8 = new NodeSequence(3); }
         n10=<LPAREN> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n11=arglist()
         { n8.addNode(n11); }
         n13=<RPAREN> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n8.addNode(n12); }
         { n2 = new NodeChoice(n8, 1); }
      |
         { n14 = new NodeSequence(3); }
         n16=<LBRACKET> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=subscriptlist()
         { n14.addNode(n17); }
         n19=<RBRACKET> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n14.addNode(n18); }
         { n2 = new NodeChoice(n14, 2); }
      |
         { n20 = new NodeSequence(2); }
         n22=<DOT> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         n23=AnyName()
         { n20.addNode(n23); }
         { n2 = new NodeChoice(n20, 3); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new atomtrailer(n0,n1); }
}

atom atom() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   SmartTestList n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   listmaker n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23 = new NodeOptional();
   dictmaker n24;
   NodeToken n25;
   Token n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   SmartTestList n30;
   NodeToken n31;
   Token n32;
   Name n33;
   PythonNumber n34;
   NodeSequence n35;
   PythonString n36;
   NodeListOptional n37 = new NodeListOptional();
   PythonString n38;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(3); }
      n3=<LPAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<RPAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n6 = new NodeSequence(3); }
      n8=<LPAREN> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      (
         n10=SmartTestList()
         { n9.addNode(n10); }
      )?
      { n6.addNode(n9); }
      n12=<RPAREN> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n6.addNode(n11); }
      { n0 = new NodeChoice(n6, 1); }
   |
      { n13 = new NodeSequence(3); }
      n15=<LBRACKET> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      (
         n17=listmaker()
         { n16.addNode(n17); }
      )?
      { n13.addNode(n16); }
      n19=<RBRACKET> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n13.addNode(n18); }
      { n0 = new NodeChoice(n13, 2); }
   |
      { n20 = new NodeSequence(3); }
      n22=<LBRACE> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      (
         n24=dictmaker()
         { n23.addNode(n24); }
      )?
      { n20.addNode(n23); }
      n26=<RBRACE> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n20.addNode(n25); }
      { n0 = new NodeChoice(n20, 3); }
   |
      { n27 = new NodeSequence(3); }
      n29="`" { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
      n30=SmartTestList()
      { n27.addNode(n30); }
      n32="`" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n27.addNode(n31); }
      { n0 = new NodeChoice(n27, 4); }
   |
      n33=Name()
      { n0 = new NodeChoice(n33, 5); }
   |
      n34=PythonNumber()
      { n0 = new NodeChoice(n34, 6); }
   |
      { n35 = new NodeSequence(2); }
      n36=PythonString()
      { n35.addNode(n36); }
      (
         n38=PythonString()
         { n37.addNode(n38); }
      )*
      { n37.nodes.trimToSize(); }
      { n35.addNode(n37); }
      { n0 = new NodeChoice(n35, 7); }
   )
   
   { return new atom(n0); }
}

lambdef lambdef() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   varargslist n3;
   NodeToken n4;
   Token n5;
   test n6;

   
}
{
   n1=<LAMBDA> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=varargslist()
      { n2.addNode(n3); }
   )?
   n5=<COLON> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=test()
   
   { return new lambdef(n0,n2,n4,n6); }
}

subscriptlist subscriptlist() :
{
   subscript n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   subscript n5;
   NodeOptional n6 = new NodeOptional();
   Comma n7;

   
}
{
   n0=subscript()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=subscript()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n7=Comma()
      { n6.addNode(n7); }
   )?
   
   { return new subscriptlist(n0,n1,n6); }
}

subscript subscript() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   test n9;
   NodeOptional n10 = new NodeOptional();
   slice n11;
   slice n12;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(2); }
      n9=test()
      { n8.addNode(n9); }
      (
         n11=slice()
         { n10.addNode(n11); }
      )?
      { n8.addNode(n10); }
      { n0 = new NodeChoice(n8, 1); }
   |
      n12=slice()
      { n0 = new NodeChoice(n12, 2); }
   )
   
   { return new subscript(n0); }
}

slice slice() :
{
   Colon n0;
   NodeOptional n1 = new NodeOptional();
   test n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   Colon n5;
   NodeOptional n6;
   test n7;

   
}
{
   n0=Colon()
   (
      n2=test()
      { n1.addNode(n2); }
   )?
   (
      { n6 = new NodeOptional(); }
      { n4 = new NodeSequence(2); }
      n5=Colon()
      { n4.addNode(n5); }
      (
         n7=test()
         { n6.addNode(n7); }
      )?
      { n4.addNode(n6); }
      { n3.addNode(n4); }
   )?
   
   { return new slice(n0,n1,n3); }
}

Colon Colon() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<COLON> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Colon(n0); }
}

Comma Comma() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<COMMA> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Comma(n0); }
}

exprlist exprlist() :
{
   expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   expr n5;
   NodeOptional n6 = new NodeOptional();
   Comma n7;

   
}
{
   n0=expr()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=expr()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n7=Comma()
      { n6.addNode(n7); }
   )?
   
   { return new exprlist(n0,n1,n6); }
}

SmartTestList SmartTestList() :
{
   test n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   test n5;
   NodeOptional n6 = new NodeOptional();
   Comma n7;

   
}
{
   n0=test()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=test()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n7=Comma()
      { n6.addNode(n7); }
   )?
   
   { return new SmartTestList(n0,n1,n6); }
}

testlist testlist() :
{
   test n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   test n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;

   
}
{
   n0=test()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=test()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n8=<COMMA> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   
   { return new testlist(n0,n1,n6); }
}

dictmaker dictmaker() :
{
   test n0;
   NodeToken n1;
   Token n2;
   test n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   test n8;
   NodeToken n9;
   Token n10;
   test n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;

   
}
{
   n0=test()
   n2=<COLON> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=test()
   (
      LOOKAHEAD(2)
      { n5 = new NodeSequence(4); }
      n7=<COMMA> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=test()
      { n5.addNode(n8); }
      n10=<COLON> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      n11=test()
      { n5.addNode(n11); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      n14=<COMMA> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
   )?
   
   { return new dictmaker(n0,n1,n3,n4,n12); }
}

listmaker listmaker() :
{
   test n0;
   NodeChoice n1;
   NodeList n2 = new NodeList();
   list_for n3;
   NodeSequence n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   test n9;
   NodeOptional n10 = new NodeOptional();
   Comma n11;

   
}
{
   n0=test()
   (
      (
         (
            n3=list_for()
            { n2.addNode(n3); }
         )+
         { n2.nodes.trimToSize(); }
         { n1 = new NodeChoice(n2, 0); }
      |
         { n4 = new NodeSequence(2); }
         (
            LOOKAHEAD(2)
            { n6 = new NodeSequence(2); }
            n8=<COMMA> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
            n9=test()
            { n6.addNode(n9); }
            { n5.addNode(n6); }
         )*
         { n5.nodes.trimToSize(); }
         { n4.addNode(n5); }
         (
            n11=Comma()
            { n10.addNode(n11); }
         )?
         { n4.addNode(n10); }
         { n1 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new listmaker(n0,n1); }
}

list_for list_for() :
{
   NodeToken n0;
   Token n1;
   exprlist n2;
   NodeToken n3;
   Token n4;
   SmartTestList n5;
   NodeListOptional n6 = new NodeListOptional();
   list_if n7;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=exprlist()
   n4=<IN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SmartTestList()
   (
      n7=list_if()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new list_for(n0,n2,n3,n5,n6); }
}

list_if list_if() :
{
   NodeToken n0;
   Token n1;
   test n2;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=test()
   
   { return new list_if(n0,n2); }
}

classdef classdef() :
{
   NodeToken n0;
   Token n1;
   Name n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   testlist n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   suite n12;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   (
      { n4 = new NodeSequence(3); }
      n6=<LPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=testlist()
      { n4.addNode(n7); }
      n9=<RPAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      { n3.addNode(n4); }
   )?
   n11=<COLON> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=suite()
   
   { return new classdef(n0,n2,n3,n10,n12); }
}

arglist arglist() :
{
   NodeChoice n0;
   NodeSequence n1;
   normalargs n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeChoice n8;
   NodeSequence n9;
   ExtraArgValueList n10;
   NodeOptional n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   ExtraKeywordValueList n15;
   ExtraKeywordValueList n16;
   NodeOptional n17 = new NodeOptional();
   NodeChoice n18;
   NodeSequence n19;
   ExtraArgValueList n20;
   NodeOptional n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   ExtraKeywordValueList n25;
   ExtraKeywordValueList n26;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=normalargs()
      { n1.addNode(n2); }
      (
         { n7 = new NodeOptional(); }
         { n4 = new NodeSequence(2); }
         n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            { n11 = new NodeOptional(); }
            (
               LOOKAHEAD(2)
               { n9 = new NodeSequence(3); }
               n10=ExtraArgValueList()
               { n9.addNode(n10); }
               (
                  { n12 = new NodeSequence(2); }
                  n14=<COMMA> { n13 = JTBToolkit.makeNodeToken(n14); }
                  { n12.addNode(n13); }
                  n15=ExtraKeywordValueList()
                  { n12.addNode(n15); }
                  { n11.addNode(n12); }
               )?
               { n9.addNode(n11); }
               { n8 = new NodeChoice(n9, 0); }
            |
               n16=ExtraKeywordValueList()
               { n8 = new NodeChoice(n16, 1); }
            )
            { n7.addNode(n8); }
         )?
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n21 = new NodeOptional(); }
         (
            LOOKAHEAD(2)
            { n19 = new NodeSequence(3); }
            n20=ExtraArgValueList()
            { n19.addNode(n20); }
            (
               { n22 = new NodeSequence(2); }
               n24=<COMMA> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n22.addNode(n23); }
               n25=ExtraKeywordValueList()
               { n22.addNode(n25); }
               { n21.addNode(n22); }
            )?
            { n19.addNode(n21); }
            { n18 = new NodeChoice(n19, 0); }
         |
            n26=ExtraKeywordValueList()
            { n18 = new NodeChoice(n26, 1); }
         )
         { n17.addNode(n18); }
      )?
      { n0 = new NodeChoice(n17, 1); }
   )
   
   { return new arglist(n0); }
}

normalargs normalargs() :
{
   argument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   argument n5;

   
}
{
   n0=argument()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=argument()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new normalargs(n0,n1); }
}

ExtraArgValueList ExtraArgValueList() :
{
   NodeToken n0;
   Token n1;
   test n2;

   
}
{
   n1=<MULTIPLY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=test()
   
   { return new ExtraArgValueList(n0,n2); }
}

ExtraKeywordValueList ExtraKeywordValueList() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   test n8;

   
}
{
   (
      (
         n2=<POWER> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(2); }
         n5=<MULTIPLY> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<MULTIPLY> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n8=test()
   
   { return new ExtraKeywordValueList(n0,n8); }
}

argument argument() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   AnyName n2;
   NodeToken n3;
   Token n4;
   test n5;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(2); }
      n2=AnyName()
      { n1.addNode(n2); }
      n4=<EQUAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   n5=test()
   
   { return new argument(n0,n5); }
}

PythonNumber PythonNumber() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<HEXNUMBER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OCTNUMBER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DECNUMBER> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<FLOAT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<COMPLEX> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new PythonNumber(n0); }
}

Complex Complex() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FLOAT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Complex(n0); }
}

Name Name() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<NAME> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<AS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Name(n0); }
}

PythonString PythonString() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2=<SINGLE_STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<SINGLE_STRING2> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<TRIPLE_STRING> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<TRIPLE_STRING2> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<SINGLE_USTRING> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<SINGLE_USTRING2> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<TRIPLE_USTRING> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<TRIPLE_USTRING2> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new PythonString(n0); }
}

AnyName AnyName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;

   
}
{
   (
      n2=<NAME> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OR_BOOL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<AND_BOOL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<NOT_BOOL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<IN> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<LAMBDA> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<IF> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<ELSE> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<ELIF> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<WHILE> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<FOR> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<TRY> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28=<EXCEPT> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30=<DEF> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32=<CLASS> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34=<FINALLY> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=<PRINT> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38=<PASS> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40=<BREAK> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42=<CONTINUE> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44=<RETURN> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46=<YIELD> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48=<IMPORT> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50=<FROM> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52=<DEL> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54=<RAISE> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56=<GLOBAL> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58=<EXEC> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60=<ASSERT> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62=<AS> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   )
   
   { return new AnyName(n0); }
}
